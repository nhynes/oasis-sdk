(function() {var implementors = {};
implementors["bitvec"] = [{"text":"impl&lt;O, O2, T, V, '_&gt; TryFrom&lt;&amp;'_ BitSlice&lt;O2, T&gt;&gt; for BitArray&lt;O, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;O: BitOrder,<br>&nbsp;&nbsp;&nbsp;&nbsp;O2: BitOrder,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: BitStore,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: BitView + Sized,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'a, O, V&gt; TryFrom&lt;&amp;'a BitSlice&lt;O, &lt;V as BitView&gt;::Store&gt;&gt; for &amp;'a BitArray&lt;O, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;O: BitOrder,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: BitView + Sized,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'a, O, V&gt; TryFrom&lt;&amp;'a mut BitSlice&lt;O, &lt;V as BitView&gt;::Store&gt;&gt; for &amp;'a mut BitArray&lt;O, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;O: BitOrder,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: BitView + Sized,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'a, O, T&gt; TryFrom&lt;&amp;'a [T]&gt; for &amp;'a BitSlice&lt;O, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;O: BitOrder,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: BitStore + BitMemory,&nbsp;</span>","synthetic":false,"types":[]}];
implementors["const_oid"] = [{"text":"impl&lt;'_&gt; TryFrom&lt;&amp;'_ [u32]&gt; for ObjectIdentifier","synthetic":false,"types":[]}];
implementors["ecdsa"] = [{"text":"impl&lt;C, '_&gt; TryFrom&lt;&amp;'_ [u8]&gt; for Signature&lt;C&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;C: Curve,<br>&nbsp;&nbsp;&nbsp;&nbsp;C::FieldSize: Add + ArrayLength&lt;u8&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;MaxSize&lt;C&gt;: ArrayLength&lt;u8&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;C::FieldSize as Add&gt;::Output: Add&lt;MaxOverhead&gt; + ArrayLength&lt;u8&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;C, '_&gt; TryFrom&lt;&amp;'_ [u8]&gt; for Signature&lt;C&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;C: Curve + CheckSignatureBytes,<br>&nbsp;&nbsp;&nbsp;&nbsp;SignatureSize&lt;C&gt;: ArrayLength&lt;u8&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;C&gt; TryFrom&lt;Signature&lt;C&gt;&gt; for Signature&lt;C&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;C: Curve + CheckSignatureBytes,<br>&nbsp;&nbsp;&nbsp;&nbsp;C::FieldSize: Add + ArrayLength&lt;u8&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;MaxSize&lt;C&gt;: ArrayLength&lt;u8&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;C::FieldSize as Add&gt;::Output: Add&lt;MaxOverhead&gt; + ArrayLength&lt;u8&gt;,&nbsp;</span>","synthetic":false,"types":[]}];
implementors["ed25519"] = [{"text":"impl&lt;'a&gt; TryFrom&lt;&amp;'a [u8]&gt; for Signature","synthetic":false,"types":[]}];
implementors["elliptic_curve"] = [{"text":"impl&lt;C&gt; TryFrom&lt;EncodedPoint&lt;C&gt;&gt; for PublicKey&lt;C&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;C: Curve + ProjectiveArithmetic,<br>&nbsp;&nbsp;&nbsp;&nbsp;FieldBytes&lt;C&gt;: From&lt;Scalar&lt;C&gt;&gt; + for&lt;'r&gt; From&lt;&amp;'r Scalar&lt;C&gt;&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;Scalar&lt;C&gt;: PrimeField&lt;Repr = FieldBytes&lt;C&gt;&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;AffinePoint&lt;C&gt;: Copy + Clone + Debug + Default + FromEncodedPoint&lt;C&gt; + ToEncodedPoint&lt;C&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;ProjectivePoint&lt;C&gt;: From&lt;AffinePoint&lt;C&gt;&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;UntaggedPointSize&lt;C&gt;: Add&lt;U1&gt; + ArrayLength&lt;u8&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;UncompressedPointSize&lt;C&gt;: ArrayLength&lt;u8&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;C, '_&gt; TryFrom&lt;&amp;'_ EncodedPoint&lt;C&gt;&gt; for PublicKey&lt;C&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;C: Curve + ProjectiveArithmetic,<br>&nbsp;&nbsp;&nbsp;&nbsp;FieldBytes&lt;C&gt;: From&lt;Scalar&lt;C&gt;&gt; + for&lt;'r&gt; From&lt;&amp;'r Scalar&lt;C&gt;&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;Scalar&lt;C&gt;: PrimeField&lt;Repr = FieldBytes&lt;C&gt;&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;AffinePoint&lt;C&gt;: Copy + Clone + Debug + Default + FromEncodedPoint&lt;C&gt; + ToEncodedPoint&lt;C&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;ProjectivePoint&lt;C&gt;: From&lt;AffinePoint&lt;C&gt;&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;UntaggedPointSize&lt;C&gt;: Add&lt;U1&gt; + ArrayLength&lt;u8&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;UncompressedPointSize&lt;C&gt;: ArrayLength&lt;u8&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;C, '_&gt; TryFrom&lt;&amp;'_ [u8]&gt; for NonZeroScalar&lt;C&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;C: Curve + ProjectiveArithmetic,<br>&nbsp;&nbsp;&nbsp;&nbsp;FieldBytes&lt;C&gt;: From&lt;Scalar&lt;C&gt;&gt; + for&lt;'r&gt; From&lt;&amp;'r Scalar&lt;C&gt;&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;Scalar&lt;C&gt;: PrimeField&lt;Repr = FieldBytes&lt;C&gt;&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;C, '_&gt; TryFrom&lt;&amp;'_ [u8]&gt; for SecretKey&lt;C&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;C: Curve + SecretValue,<br>&nbsp;&nbsp;&nbsp;&nbsp;C::Secret: Clone + Zeroize,<br>&nbsp;&nbsp;&nbsp;&nbsp;FieldBytes&lt;C&gt;: From&lt;C::Secret&gt;,&nbsp;</span>","synthetic":false,"types":[]}];
implementors["k256"] = [{"text":"impl&lt;'_&gt; TryFrom&lt;&amp;'_ [u8]&gt; for Signature","synthetic":false,"types":[]},{"text":"impl TryFrom&lt;u8&gt; for Id","synthetic":false,"types":[]},{"text":"impl&lt;'_&gt; TryFrom&lt;&amp;'_ EncodedPoint&lt;Secp256k1&gt;&gt; for VerifyingKey","synthetic":false,"types":[]}];
implementors["num_bigint"] = [{"text":"impl&lt;'_&gt; TryFrom&lt;&amp;'_ BigInt&gt; for u8","synthetic":false,"types":[]},{"text":"impl TryFrom&lt;BigInt&gt; for u8","synthetic":false,"types":[]},{"text":"impl&lt;'_&gt; TryFrom&lt;&amp;'_ BigInt&gt; for u16","synthetic":false,"types":[]},{"text":"impl TryFrom&lt;BigInt&gt; for u16","synthetic":false,"types":[]},{"text":"impl&lt;'_&gt; TryFrom&lt;&amp;'_ BigInt&gt; for u32","synthetic":false,"types":[]},{"text":"impl TryFrom&lt;BigInt&gt; for u32","synthetic":false,"types":[]},{"text":"impl&lt;'_&gt; TryFrom&lt;&amp;'_ BigInt&gt; for u64","synthetic":false,"types":[]},{"text":"impl TryFrom&lt;BigInt&gt; for u64","synthetic":false,"types":[]},{"text":"impl&lt;'_&gt; TryFrom&lt;&amp;'_ BigInt&gt; for usize","synthetic":false,"types":[]},{"text":"impl TryFrom&lt;BigInt&gt; for usize","synthetic":false,"types":[]},{"text":"impl&lt;'_&gt; TryFrom&lt;&amp;'_ BigInt&gt; for u128","synthetic":false,"types":[]},{"text":"impl TryFrom&lt;BigInt&gt; for u128","synthetic":false,"types":[]},{"text":"impl&lt;'_&gt; TryFrom&lt;&amp;'_ BigInt&gt; for i8","synthetic":false,"types":[]},{"text":"impl TryFrom&lt;BigInt&gt; for i8","synthetic":false,"types":[]},{"text":"impl&lt;'_&gt; TryFrom&lt;&amp;'_ BigInt&gt; for i16","synthetic":false,"types":[]},{"text":"impl TryFrom&lt;BigInt&gt; for i16","synthetic":false,"types":[]},{"text":"impl&lt;'_&gt; TryFrom&lt;&amp;'_ BigInt&gt; for i32","synthetic":false,"types":[]},{"text":"impl TryFrom&lt;BigInt&gt; for i32","synthetic":false,"types":[]},{"text":"impl&lt;'_&gt; TryFrom&lt;&amp;'_ BigInt&gt; for i64","synthetic":false,"types":[]},{"text":"impl TryFrom&lt;BigInt&gt; for i64","synthetic":false,"types":[]},{"text":"impl&lt;'_&gt; TryFrom&lt;&amp;'_ BigInt&gt; for isize","synthetic":false,"types":[]},{"text":"impl TryFrom&lt;BigInt&gt; for isize","synthetic":false,"types":[]},{"text":"impl&lt;'_&gt; TryFrom&lt;&amp;'_ BigInt&gt; for i128","synthetic":false,"types":[]},{"text":"impl TryFrom&lt;BigInt&gt; for i128","synthetic":false,"types":[]},{"text":"impl&lt;'_&gt; TryFrom&lt;&amp;'_ BigInt&gt; for BigUint","synthetic":false,"types":[]},{"text":"impl TryFrom&lt;BigInt&gt; for BigUint","synthetic":false,"types":[]},{"text":"impl&lt;'_&gt; TryFrom&lt;&amp;'_ BigUint&gt; for u8","synthetic":false,"types":[]},{"text":"impl TryFrom&lt;BigUint&gt; for u8","synthetic":false,"types":[]},{"text":"impl&lt;'_&gt; TryFrom&lt;&amp;'_ BigUint&gt; for u16","synthetic":false,"types":[]},{"text":"impl TryFrom&lt;BigUint&gt; for u16","synthetic":false,"types":[]},{"text":"impl&lt;'_&gt; TryFrom&lt;&amp;'_ BigUint&gt; for u32","synthetic":false,"types":[]},{"text":"impl TryFrom&lt;BigUint&gt; for u32","synthetic":false,"types":[]},{"text":"impl&lt;'_&gt; TryFrom&lt;&amp;'_ BigUint&gt; for u64","synthetic":false,"types":[]},{"text":"impl TryFrom&lt;BigUint&gt; for u64","synthetic":false,"types":[]},{"text":"impl&lt;'_&gt; TryFrom&lt;&amp;'_ BigUint&gt; for usize","synthetic":false,"types":[]},{"text":"impl TryFrom&lt;BigUint&gt; for usize","synthetic":false,"types":[]},{"text":"impl&lt;'_&gt; TryFrom&lt;&amp;'_ BigUint&gt; for u128","synthetic":false,"types":[]},{"text":"impl TryFrom&lt;BigUint&gt; for u128","synthetic":false,"types":[]},{"text":"impl&lt;'_&gt; TryFrom&lt;&amp;'_ BigUint&gt; for i8","synthetic":false,"types":[]},{"text":"impl TryFrom&lt;BigUint&gt; for i8","synthetic":false,"types":[]},{"text":"impl&lt;'_&gt; TryFrom&lt;&amp;'_ BigUint&gt; for i16","synthetic":false,"types":[]},{"text":"impl TryFrom&lt;BigUint&gt; for i16","synthetic":false,"types":[]},{"text":"impl&lt;'_&gt; TryFrom&lt;&amp;'_ BigUint&gt; for i32","synthetic":false,"types":[]},{"text":"impl TryFrom&lt;BigUint&gt; for i32","synthetic":false,"types":[]},{"text":"impl&lt;'_&gt; TryFrom&lt;&amp;'_ BigUint&gt; for i64","synthetic":false,"types":[]},{"text":"impl TryFrom&lt;BigUint&gt; for i64","synthetic":false,"types":[]},{"text":"impl&lt;'_&gt; TryFrom&lt;&amp;'_ BigUint&gt; for isize","synthetic":false,"types":[]},{"text":"impl TryFrom&lt;BigUint&gt; for isize","synthetic":false,"types":[]},{"text":"impl&lt;'_&gt; TryFrom&lt;&amp;'_ BigUint&gt; for i128","synthetic":false,"types":[]},{"text":"impl TryFrom&lt;BigUint&gt; for i128","synthetic":false,"types":[]},{"text":"impl TryFrom&lt;i8&gt; for BigUint","synthetic":false,"types":[]},{"text":"impl TryFrom&lt;i16&gt; for BigUint","synthetic":false,"types":[]},{"text":"impl TryFrom&lt;i32&gt; for BigUint","synthetic":false,"types":[]},{"text":"impl TryFrom&lt;i64&gt; for BigUint","synthetic":false,"types":[]},{"text":"impl TryFrom&lt;isize&gt; for BigUint","synthetic":false,"types":[]},{"text":"impl TryFrom&lt;i128&gt; for BigUint","synthetic":false,"types":[]}];
implementors["oasis_runtime_sdk"] = [{"text":"impl&lt;'_&gt; TryFrom&lt;&amp;'_ [u8]&gt; for Address","synthetic":false,"types":[]},{"text":"impl&lt;'_&gt; TryFrom&lt;&amp;'_ [u8]&gt; for Denomination","synthetic":false,"types":[]}];
implementors["pkcs8"] = [{"text":"impl&lt;'_&gt; TryFrom&lt;&amp;'_ [u8]&gt; for AlgorithmIdentifier","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; TryFrom&lt;&amp;'a [u8]&gt; for PrivateKeyInfo&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; TryFrom&lt;&amp;'a [u8]&gt; for SubjectPublicKeyInfo&lt;'a&gt;","synthetic":false,"types":[]}];
implementors["sgx_isa"] = [{"text":"impl TryFrom&lt;u32&gt; for Encls","synthetic":false,"types":[]},{"text":"impl TryFrom&lt;u32&gt; for Enclu","synthetic":false,"types":[]},{"text":"impl TryFrom&lt;u32&gt; for ErrorCode","synthetic":false,"types":[]},{"text":"impl TryFrom&lt;u8&gt; for PageType","synthetic":false,"types":[]},{"text":"impl TryFrom&lt;u16&gt; for Keyname","synthetic":false,"types":[]}];
implementors["snow"] = [{"text":"impl TryFrom&lt;HandshakeState&gt; for StatelessTransportState","synthetic":false,"types":[]},{"text":"impl TryFrom&lt;HandshakeState&gt; for TransportState","synthetic":false,"types":[]}];
if (window.register_implementors) {window.register_implementors(implementors);} else {window.pending_implementors = implementors;}})()