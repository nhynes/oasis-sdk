(function() {var implementors = {};
implementors["aead"] = [{"text":"impl Send for Error","synthetic":true,"types":[]},{"text":"impl&lt;'msg, 'aad&gt; Send for Payload&lt;'msg, 'aad&gt;","synthetic":true,"types":[]}];
implementors["aes_gcm"] = [{"text":"impl&lt;Aes, NonceSize&gt; Send for AesGcm&lt;Aes, NonceSize&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Aes: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;NonceSize: Send,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["aesni"] = [{"text":"impl Send for Aes128","synthetic":true,"types":[]},{"text":"impl Send for Aes192","synthetic":true,"types":[]},{"text":"impl Send for Aes256","synthetic":true,"types":[]}];
implementors["anyhow"] = [{"text":"impl Send for Error","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !Send for Chain&lt;'a&gt;","synthetic":true,"types":[]}];
implementors["arbitrary"] = [{"text":"impl&lt;'a&gt; Send for Unstructured&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Send for Error","synthetic":true,"types":[]},{"text":"impl&lt;'a, 'b, ElementType&gt; Send for ArbitraryIter&lt;'a, 'b, ElementType&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;ElementType: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, ElementType&gt; Send for ArbitraryTakeRestIter&lt;'a, ElementType&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;ElementType: Send,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["arc_swap"] = [{"text":"impl&lt;T, S&gt; Send for Guard&lt;T, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;S as InnerStrategy&lt;T&gt;&gt;::Protected: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, S&gt; Send for ArcSwapAny&lt;T, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A, T, F&gt; Send for Map&lt;A, T, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for Constant&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A, T&gt; Send for Cache&lt;A, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A, T, F&gt; Send for MapCache&lt;A, T, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["base64"] = [{"text":"impl Send for Config","synthetic":true,"types":[]},{"text":"impl Send for DecodeError","synthetic":true,"types":[]},{"text":"impl Send for CharacterSet","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for Base64Display&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, R&gt; Send for DecoderReader&lt;'a, R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;W&gt; Send for EncoderWriter&lt;W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;W: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; Send for EncoderStringWriter&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Send,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["bech32"] = [{"text":"impl Send for u5","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !Send for Bech32Writer&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Send for Error","synthetic":true,"types":[]}];
implementors["bincode"] = [{"text":"impl Send for Config","synthetic":true,"types":[]},{"text":"impl&lt;W, O&gt; Send for Serializer&lt;W, O&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;O: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;W: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for ErrorKind","synthetic":true,"types":[]},{"text":"impl Send for BigEndian","synthetic":true,"types":[]},{"text":"impl Send for LittleEndian","synthetic":true,"types":[]},{"text":"impl Send for NativeEndian","synthetic":true,"types":[]},{"text":"impl Send for FixintEncoding","synthetic":true,"types":[]},{"text":"impl Send for VarintEncoding","synthetic":true,"types":[]},{"text":"impl Send for Bounded","synthetic":true,"types":[]},{"text":"impl Send for Infinite","synthetic":true,"types":[]},{"text":"impl Send for AllowTrailing","synthetic":true,"types":[]},{"text":"impl Send for RejectTrailing","synthetic":true,"types":[]},{"text":"impl Send for DefaultOptions","synthetic":true,"types":[]},{"text":"impl&lt;O, L&gt; Send for WithOtherLimit&lt;O, L&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;L: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;O: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;O, E&gt; Send for WithOtherEndian&lt;O, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;O: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;O, I&gt; Send for WithOtherIntEncoding&lt;O, I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;O: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;O, T&gt; Send for WithOtherTrailing&lt;O, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;O: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R, O&gt; Send for Deserializer&lt;R, O&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;O: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'storage&gt; Send for SliceReader&lt;'storage&gt;","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Send for IoReader&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Send,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["bitvec"] = [{"text":"impl&lt;O, V&gt; Send for BitArray&lt;O, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;O: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, O, T&gt; Send for BitDomain&lt;'a, O, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as BitStore&gt;::Mem: BitStore + Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as BitStore&gt;::Threadsafe: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt;T as BitStore&gt;::Mem as BitStore&gt;::Threadsafe: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, O, T&gt; Send for BitDomainMut&lt;'a, O, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as BitStore&gt;::Mem: BitStore + Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as BitStore&gt;::Threadsafe: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt;T as BitStore&gt;::Mem as BitStore&gt;::Threadsafe: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Send for Domain&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as BitStore&gt;::Alias: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as BitStore&gt;::Mem: Send + Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Send for DomainMut&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as BitStore&gt;::Alias: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as BitStore&gt;::Mem: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;M&gt; Send for BitIdx&lt;M&gt;","synthetic":true,"types":[]},{"text":"impl&lt;M&gt; Send for BitTail&lt;M&gt;","synthetic":true,"types":[]},{"text":"impl&lt;M&gt; Send for BitPos&lt;M&gt;","synthetic":true,"types":[]},{"text":"impl&lt;M&gt; Send for BitSel&lt;M&gt;","synthetic":true,"types":[]},{"text":"impl&lt;M&gt; Send for BitMask&lt;M&gt;","synthetic":true,"types":[]},{"text":"impl Send for Msb0","synthetic":true,"types":[]},{"text":"impl Send for Lsb0","synthetic":true,"types":[]},{"text":"impl&lt;'a, O, T&gt; Send for Chunks&lt;'a, O, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as BitStore&gt;::Threadsafe: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, O, T&gt; Send for ChunksExact&lt;'a, O, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as BitStore&gt;::Threadsafe: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, O, T&gt; Send for ChunksExactMut&lt;'a, O, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as BitStore&gt;::Alias: BitStore,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt;T as BitStore&gt;::Alias as BitStore&gt;::Threadsafe: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, O, T&gt; Send for ChunksMut&lt;'a, O, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as BitStore&gt;::Alias: BitStore,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt;T as BitStore&gt;::Alias as BitStore&gt;::Threadsafe: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, O, T&gt; Send for RChunks&lt;'a, O, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as BitStore&gt;::Threadsafe: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, O, T&gt; Send for RChunksExact&lt;'a, O, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as BitStore&gt;::Threadsafe: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, O, T&gt; Send for RChunksExactMut&lt;'a, O, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as BitStore&gt;::Alias: BitStore,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt;T as BitStore&gt;::Alias as BitStore&gt;::Threadsafe: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, O, T&gt; Send for RChunksMut&lt;'a, O, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as BitStore&gt;::Alias: BitStore,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt;T as BitStore&gt;::Alias as BitStore&gt;::Threadsafe: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, O, T, P&gt; Send for RSplit&lt;'a, O, T, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as BitStore&gt;::Threadsafe: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, O, T, P&gt; Send for RSplitMut&lt;'a, O, T, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as BitStore&gt;::Alias: BitStore,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt;T as BitStore&gt;::Alias as BitStore&gt;::Threadsafe: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, O, T, P&gt; Send for RSplitN&lt;'a, O, T, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as BitStore&gt;::Threadsafe: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, O, T, P&gt; Send for RSplitNMut&lt;'a, O, T, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as BitStore&gt;::Alias: BitStore,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt;T as BitStore&gt;::Alias as BitStore&gt;::Threadsafe: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, O, T, P&gt; Send for Split&lt;'a, O, T, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as BitStore&gt;::Threadsafe: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, O, T, P&gt; Send for SplitMut&lt;'a, O, T, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as BitStore&gt;::Alias: BitStore,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt;T as BitStore&gt;::Alias as BitStore&gt;::Threadsafe: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, O, T, P&gt; Send for SplitN&lt;'a, O, T, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as BitStore&gt;::Threadsafe: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, O, T, P&gt; Send for SplitNMut&lt;'a, O, T, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as BitStore&gt;::Alias: BitStore,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt;T as BitStore&gt;::Alias as BitStore&gt;::Threadsafe: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, O, T&gt; Send for Windows&lt;'a, O, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as BitStore&gt;::Threadsafe: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, O, T&gt; !Send for BitMut&lt;'a, O, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;O, T, '_&gt; Send for Iter&lt;'_, O, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;O: BitOrder,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: BitStore,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;O, T, '_&gt; Send for IterMut&lt;'_, O, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;O: BitOrder,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: BitStore,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;O, T&gt; Send for BitSlice&lt;O, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;O: BitOrder,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: BitStore,<br>&nbsp;&nbsp;&nbsp;&nbsp;T::Threadsafe: Send,&nbsp;</span>","synthetic":false,"types":[]}];
implementors["blake2"] = [{"text":"impl Send for Blake2b","synthetic":true,"types":[]},{"text":"impl Send for VarBlake2b","synthetic":true,"types":[]},{"text":"impl Send for Blake2s","synthetic":true,"types":[]},{"text":"impl Send for VarBlake2s","synthetic":true,"types":[]}];
implementors["block_buffer"] = [{"text":"impl&lt;BlockSize&gt; Send for BlockBuffer&lt;BlockSize&gt;","synthetic":true,"types":[]}];
implementors["block_cipher"] = [{"text":"impl Send for InvalidKeyLength","synthetic":true,"types":[]}];
implementors["byteorder"] = [{"text":"impl Send for BigEndian","synthetic":true,"types":[]},{"text":"impl Send for LittleEndian","synthetic":true,"types":[]}];
implementors["chacha20"] = [{"text":"impl&lt;R&gt; Send for Cipher&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for XChaCha20","synthetic":true,"types":[]}];
implementors["chacha20poly1305"] = [{"text":"impl Send for XChaCha20Poly1305","synthetic":true,"types":[]},{"text":"impl&lt;C&gt; Send for ChaChaPoly1305&lt;C&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;C: Send,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["chrono"] = [{"text":"impl Send for ParseWeekdayError","synthetic":true,"types":[]},{"text":"impl Send for ParseMonthError","synthetic":true,"types":[]},{"text":"impl Send for SecondsFormat","synthetic":true,"types":[]},{"text":"impl Send for RoundingError","synthetic":true,"types":[]},{"text":"impl Send for Weekday","synthetic":true,"types":[]},{"text":"impl Send for Month","synthetic":true,"types":[]},{"text":"impl Send for FixedOffset","synthetic":true,"types":[]},{"text":"impl Send for Local","synthetic":true,"types":[]},{"text":"impl Send for Utc","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for LocalResult&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for NaiveDate","synthetic":true,"types":[]},{"text":"impl Send for NaiveDateTime","synthetic":true,"types":[]},{"text":"impl Send for IsoWeek","synthetic":true,"types":[]},{"text":"impl Send for NaiveTime","synthetic":true,"types":[]},{"text":"impl Send for Parsed","synthetic":true,"types":[]},{"text":"impl Send for InternalNumeric","synthetic":true,"types":[]},{"text":"impl Send for InternalFixed","synthetic":true,"types":[]},{"text":"impl Send for ParseError","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Send for DelayedFormat&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for Pad","synthetic":true,"types":[]},{"text":"impl Send for Numeric","synthetic":true,"types":[]},{"text":"impl Send for Fixed","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for Item&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for StrftimeItems&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;Tz:&nbsp;TimeZone&gt; Send for Date&lt;Tz&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Tz as TimeZone&gt;::Offset: Send,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;Tz:&nbsp;TimeZone&gt; Send for DateTime&lt;Tz&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Tz as TimeZone&gt;::Offset: Send,&nbsp;</span>","synthetic":false,"types":[]}];
implementors["const_oid"] = [{"text":"impl Send for Error","synthetic":true,"types":[]},{"text":"impl Send for ObjectIdentifier","synthetic":true,"types":[]}];
implementors["cpuid_bool"] = [{"text":"impl Send for LazyBool","synthetic":true,"types":[]}];
implementors["crossbeam_channel"] = [{"text":"impl&lt;T&gt; Send for IntoIter&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Send for Iter&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Send for TryIter&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !Send for SelectedOperation&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Send for ReadyTimeoutError","synthetic":true,"types":[]},{"text":"impl Send for SelectTimeoutError","synthetic":true,"types":[]},{"text":"impl Send for TryReadyError","synthetic":true,"types":[]},{"text":"impl Send for TrySelectError","synthetic":true,"types":[]},{"text":"impl Send for RecvError","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for SendError&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for RecvTimeoutError","synthetic":true,"types":[]},{"text":"impl Send for TryRecvError","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for SendTimeoutError&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for TrySendError&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T:&nbsp;Send&gt; Send for Sender&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Send&gt; Send for Receiver&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'_&gt; Send for Select&lt;'_&gt;","synthetic":false,"types":[]}];
implementors["crossbeam_deque"] = [{"text":"impl&lt;T&gt; Send for Steal&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T:&nbsp;Send&gt; Send for Worker&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Send&gt; Send for Stealer&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Send&gt; Send for Injector&lt;T&gt;","synthetic":false,"types":[]}];
implementors["crossbeam_epoch"] = [{"text":"impl&lt;'g, T, P&gt; !Send for CompareExchangeError&lt;'g, T, P&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T:&nbsp;?Sized&gt; Send for Owned&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'g, T&gt; !Send for Shared&lt;'g, T&gt;","synthetic":true,"types":[]},{"text":"impl !Send for LocalHandle","synthetic":true,"types":[]},{"text":"impl !Send for Guard","synthetic":true,"types":[]},{"text":"impl&lt;T:&nbsp;?Sized + Pointable + Send + Sync&gt; Send for Atomic&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl Send for Collector","synthetic":false,"types":[]}];
implementors["crossbeam_queue"] = [{"text":"impl&lt;T:&nbsp;Send&gt; Send for ArrayQueue&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Send&gt; Send for SegQueue&lt;T&gt;","synthetic":false,"types":[]}];
implementors["crossbeam_utils"] = [{"text":"impl Send for Backoff","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; !Send for ShardedLockReadGuard&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; !Send for ShardedLockWriteGuard&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl Send for WaitGroup","synthetic":true,"types":[]},{"text":"impl&lt;'env&gt; Send for Scope&lt;'env&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'scope, 'env&gt; Send for ScopedThreadBuilder&lt;'scope, 'env&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T:&nbsp;Send&gt; Send for AtomicCell&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Send&gt; Send for CachePadded&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl Send for Parker","synthetic":false,"types":[]},{"text":"impl Send for Unparker","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;?Sized + Send&gt; Send for ShardedLock&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'scope, T&gt; Send for ScopedJoinHandle&lt;'scope, T&gt;","synthetic":false,"types":[]}];
implementors["crypto_mac"] = [{"text":"impl Send for InvalidKeyLength","synthetic":true,"types":[]},{"text":"impl Send for MacError","synthetic":true,"types":[]},{"text":"impl&lt;M&gt; Send for Output&lt;M&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;M as Mac&gt;::OutputSize: ArrayLength&lt;u8&gt;,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["curve25519_dalek"] = [{"text":"impl Send for Scalar","synthetic":true,"types":[]},{"text":"impl Send for MontgomeryPoint","synthetic":true,"types":[]},{"text":"impl Send for CompressedEdwardsY","synthetic":true,"types":[]},{"text":"impl Send for EdwardsPoint","synthetic":true,"types":[]},{"text":"impl Send for VartimeEdwardsPrecomputation","synthetic":true,"types":[]},{"text":"impl Send for EdwardsBasepointTable","synthetic":true,"types":[]},{"text":"impl Send for CompressedRistretto","synthetic":true,"types":[]},{"text":"impl Send for RistrettoPoint","synthetic":true,"types":[]},{"text":"impl Send for VartimeRistrettoPrecomputation","synthetic":true,"types":[]},{"text":"impl Send for RistrettoBasepointTable","synthetic":true,"types":[]}];
implementors["darling_core"] = [{"text":"impl&lt;T&gt; !Send for Fields&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;P, W&gt; Send for Generics&lt;P, W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;W: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;V, F&gt; !Send for Data&lt;V, F&gt;","synthetic":true,"types":[]},{"text":"impl Send for Style","synthetic":true,"types":[]},{"text":"impl&lt;T, L, C&gt; Send for GenericParam&lt;T, L, C&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;C: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;L: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl !Send for Error","synthetic":true,"types":[]},{"text":"impl !Send for IntoIter","synthetic":true,"types":[]},{"text":"impl Send for Options","synthetic":true,"types":[]},{"text":"impl Send for Purpose","synthetic":true,"types":[]},{"text":"impl !Send for IdentString","synthetic":true,"types":[]},{"text":"impl Send for Ignored","synthetic":true,"types":[]},{"text":"impl !Send for PathList","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !Send for SpannedValue&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T, O&gt; Send for WithOriginal&lt;T, O&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;O: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for Flag","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for Override&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["deoxysii"] = [{"text":"impl Send for DeoxysII","synthetic":true,"types":[]},{"text":"impl Send for DecryptionError","synthetic":true,"types":[]}];
implementors["digest"] = [{"text":"impl Send for InvalidOutputSize","synthetic":true,"types":[]}];
implementors["ecdsa"] = [{"text":"impl&lt;C&gt; Send for Signature&lt;C&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;C as Curve&gt;::FieldSize: Add&lt;&lt;C as Curve&gt;::FieldSize&gt;,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;C&gt; Send for Signature&lt;C&gt;","synthetic":true,"types":[]},{"text":"impl&lt;C&gt; Send for SigningKey&lt;C&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;C as ProjectiveArithmetic&gt;::ProjectivePoint: Group,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;C&gt; Send for VerifyingKey&lt;C&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt;C as ProjectiveArithmetic&gt;::ProjectivePoint as Curve&gt;::AffineRepr: Send,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["ed25519"] = [{"text":"impl Send for Signature","synthetic":true,"types":[]}];
implementors["ed25519_dalek"] = [{"text":"impl Send for Keypair","synthetic":true,"types":[]},{"text":"impl Send for PublicKey","synthetic":true,"types":[]},{"text":"impl Send for SecretKey","synthetic":true,"types":[]},{"text":"impl Send for ExpandedSecretKey","synthetic":true,"types":[]}];
implementors["elliptic_curve"] = [{"text":"impl Send for Error","synthetic":true,"types":[]},{"text":"impl&lt;C&gt; Send for EncodedPoint&lt;C&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;C as Curve&gt;::FieldSize: Add&lt;&lt;C as Curve&gt;::FieldSize&gt;,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, C&gt; Send for Coordinates&lt;'a, C&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;C as Curve&gt;::FieldSize: ArrayLength&lt;u8&gt;,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for Tag","synthetic":true,"types":[]},{"text":"impl&lt;C&gt; Send for PublicKey&lt;C&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt;C as ProjectiveArithmetic&gt;::ProjectivePoint as Curve&gt;::AffineRepr: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;C&gt; Send for NonZeroScalar&lt;C&gt;","synthetic":true,"types":[]},{"text":"impl&lt;C&gt; Send for SecretKey&lt;C&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;C as SecretValue&gt;::Secret: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;C&gt; Send for SecretBytes&lt;C&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;C as Curve&gt;::FieldSize: ArrayLength&lt;u8&gt;,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["fnv"] = [{"text":"impl Send for FnvHasher","synthetic":true,"types":[]}];
implementors["futures"] = [{"text":"impl&lt;T&gt; Send for Async&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for AsyncSink&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, E&gt; Send for Empty&lt;T, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;F, R&gt; Send for Lazy&lt;F, R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;R as IntoFuture&gt;::Future: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;F&gt; Send for PollFn&lt;F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, E&gt; Send for FutureResult&lt;T, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A, F&gt; Send for LoopFn&lt;A, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;A as IntoFuture&gt;::Future: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A, B, F&gt; Send for AndThen&lt;A, B, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as IntoFuture&gt;::Future: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A&gt; Send for Flatten&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt;A as Future&gt;::Item as IntoFuture&gt;::Future: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;F&gt; Send for FlattenStream&lt;F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;F as Future&gt;::Item: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A&gt; Send for Fuse&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;F&gt; Send for IntoStream&lt;F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A, B&gt; Send for Join&lt;A, B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;B: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;A as Future&gt;::Item: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Future&gt;::Item: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A, B, C&gt; Send for Join3&lt;A, B, C&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;B: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;C: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;A as Future&gt;::Item: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Future&gt;::Item: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;C as Future&gt;::Item: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A, B, C, D&gt; Send for Join4&lt;A, B, C, D&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;B: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;C: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;D: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;A as Future&gt;::Item: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Future&gt;::Item: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;C as Future&gt;::Item: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;D as Future&gt;::Item: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A, B, C, D, E&gt; Send for Join5&lt;A, B, C, D, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;B: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;C: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;D: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;A as Future&gt;::Item: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Future&gt;::Item: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;C as Future&gt;::Item: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;D as Future&gt;::Item: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;E as Future&gt;::Item: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A, F&gt; Send for Map&lt;A, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A, F&gt; Send for MapErr&lt;A, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A, E&gt; Send for FromErr&lt;A, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A, B, F&gt; Send for OrElse&lt;A, B, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as IntoFuture&gt;::Future: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A, B&gt; Send for Select&lt;A, B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;B: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A, B&gt; Send for SelectNext&lt;A, B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;B: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A, B&gt; Send for Select2&lt;A, B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;B: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A, B, F&gt; Send for Then&lt;A, B, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as IntoFuture&gt;::Future: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A, F&gt; Send for Inspect&lt;A, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;F&gt; Send for CatchUnwind&lt;F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Send for JoinAll&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt;I as IntoIterator&gt;::Item as IntoFuture&gt;::Future: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt;I as IntoIterator&gt;::Item as IntoFuture&gt;::Item: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A&gt; Send for SelectAll&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A&gt; Send for SelectOk&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;F&gt; Send for Shared&lt;F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;F as Future&gt;::Error: Send + Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;F as Future&gt;::Item: Send + Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for SharedItem&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send + Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Send for SharedError&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Send + Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;F&gt; Send for ExecuteError&lt;F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, S&gt; Send for Loop&lt;T, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A, B&gt; Send for Either&lt;A, B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;B: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for ExecuteErrorKind","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Send for Iter&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, E&gt; Send for IterOk&lt;I, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Send for IterResult&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, E&gt; Send for Repeat&lt;T, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S, F, U&gt; Send for AndThen&lt;S, F, U&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;U as IntoFuture&gt;::Future: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S1, S2&gt; Send for Chain&lt;S1, S2&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S1: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;S2: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; Send for Concat&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;S as Stream&gt;::Item: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; Send for Concat2&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;S as Stream&gt;::Item: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, E&gt; Send for Empty&lt;T, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S, F&gt; Send for Filter&lt;S, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S, F&gt; Send for FilterMap&lt;S, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; Send for Flatten&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;S as Stream&gt;::Item: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S, F, Fut, T&gt; Send for Fold&lt;S, F, Fut, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut as IntoFuture&gt;::Future: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S, F, U&gt; Send for ForEach&lt;S, F, U&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;U as IntoFuture&gt;::Future: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S, E&gt; Send for FromErr&lt;S, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; Send for Fuse&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; Send for StreamFuture&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S, F&gt; Send for Inspect&lt;S, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S, F&gt; Send for InspectErr&lt;S, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S, F&gt; Send for Map&lt;S, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S, F&gt; Send for MapErr&lt;S, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S1, S2&gt; Send for Merge&lt;S1, S2&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S1: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;S2: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;S2 as Stream&gt;::Error: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, E&gt; Send for Once&lt;T, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S, F, U&gt; Send for OrElse&lt;S, F, U&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;U as IntoFuture&gt;::Future: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; Send for Peekable&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;S as Stream&gt;::Item: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;F&gt; Send for PollFn&lt;F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S1, S2&gt; Send for Select&lt;S1, S2&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S1: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;S2: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; Send for Skip&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S, P, R&gt; Send for SkipWhile&lt;S, P, R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;R as IntoFuture&gt;::Future: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;S as Stream&gt;::Item: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; Send for Take&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S, P, R&gt; Send for TakeWhile&lt;S, P, R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;R as IntoFuture&gt;::Future: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;S as Stream&gt;::Item: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S, F, U&gt; Send for Then&lt;S, F, U&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;U as IntoFuture&gt;::Future: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, F, Fut&gt; Send for Unfold&lt;T, F, Fut&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut as IntoFuture&gt;::Future: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S1, S2&gt; Send for Zip&lt;S1, S2&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S1: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;S2: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;S1 as Stream&gt;::Item: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;S2 as Stream&gt;::Item: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, U&gt; Send for Forward&lt;T, U&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;U: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as Stream&gt;::Item: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; Send for Buffered&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt;S as Stream&gt;::Item as IntoFuture&gt;::Future: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt;S as Stream&gt;::Item as IntoFuture&gt;::Item: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; Send for BufferUnordered&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt;S as Stream&gt;::Item as IntoFuture&gt;::Future: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; Send for CatchUnwind&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; Send for Chunks&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;S as Stream&gt;::Error: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;S as Stream&gt;::Item: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; Send for Collect&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;S as Stream&gt;::Item: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; Send for Wait&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; Send for SplitStream&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; Send for SplitSink&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for ReuniteError&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for FuturesOrdered&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as Future&gt;::Item: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I1, I2&gt; Send for MergedItem&lt;I1, I2&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I1: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;I2: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, F&gt; !Send for IterMut&lt;'a, F&gt;","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; Send for Buffer&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;S as Sink&gt;::SinkItem: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; Send for Wait&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S, U, F, Fut&gt; Send for With&lt;S, U, F, Fut&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut as IntoFuture&gt;::Future: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;S as Sink&gt;::SinkItem: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S, U, F, St&gt; Send for WithFlatMap&lt;S, U, F, St&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;St: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;S as Sink&gt;::SinkItem: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; Send for Flush&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; Send for Send&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;S as Sink&gt;::SinkItem: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, U&gt; Send for SendAll&lt;T, U&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;U: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;U as Stream&gt;::Item: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S, F&gt; Send for SinkMapErr&lt;S, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S, E&gt; Send for SinkFromErr&lt;S, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A, B&gt; Send for Fanout&lt;A, B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;B: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;A as Sink&gt;::SinkItem: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Sink&gt;::SinkItem: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for Task","synthetic":true,"types":[]},{"text":"impl&lt;T:&nbsp;?Sized&gt; Send for Spawn&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for UnparkEvent","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for LocalKey&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for BiLock&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Send for BiLockGuard&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for BiLockAcquire&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for BiLockAcquired&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for Receiver&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for Sender&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for Canceled","synthetic":true,"types":[]},{"text":"impl&lt;T, E&gt; Send for SpawnHandle&lt;T, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;F&gt; Send for Execute&lt;F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;F as Future&gt;::Error: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;F as Future&gt;::Item: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for Sender&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for UnboundedSender&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for Receiver&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for UnboundedReceiver&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for SendError&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for TrySendError&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Item, Error&gt; Send for SpawnHandle&lt;Item, Error&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Error: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;Item: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; Send for Execute&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;S as Stream&gt;::Error: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;S as Stream&gt;::Item: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !Send for Sender&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !Send for Receiver&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !Send for UnboundedSender&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !Send for UnboundedReceiver&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for SendError&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Item, Error&gt; !Send for SpawnHandle&lt;Item, Error&gt;","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; !Send for Execute&lt;S&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !Send for Sender&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !Send for Receiver&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T, E&gt; !Send for SpawnHandle&lt;T, E&gt;","synthetic":true,"types":[]},{"text":"impl&lt;F&gt; !Send for Execute&lt;F&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T:&nbsp;Send&gt; Send for FuturesUnordered&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl Send for AtomicTask","synthetic":false,"types":[]},{"text":"impl Send for NotifyHandle","synthetic":false,"types":[]}];
implementors["generic_array"] = [{"text":"impl&lt;T, N&gt; Send for GenericArrayIter&lt;T, N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T:&nbsp;Send, N:&nbsp;ArrayLength&lt;T&gt;&gt; Send for GenericArray&lt;T, N&gt;","synthetic":false,"types":[]}];
implementors["getrandom"] = [{"text":"impl Send for Error","synthetic":true,"types":[]}];
implementors["ghash"] = [{"text":"impl Send for GHash","synthetic":true,"types":[]}];
implementors["half"] = [{"text":"impl Send for f16","synthetic":true,"types":[]},{"text":"impl Send for bf16","synthetic":true,"types":[]}];
implementors["hex"] = [{"text":"impl Send for FromHexError","synthetic":true,"types":[]}];
implementors["hmac"] = [{"text":"impl&lt;D&gt; Send for Hmac&lt;D&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;D: Send,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["ident_case"] = [{"text":"impl Send for RenameRule","synthetic":true,"types":[]}];
implementors["intrusive_collections"] = [{"text":"impl&lt;T&gt; Send for Bound&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, A&gt; !Send for Cursor&lt;'a, A&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, A&gt; !Send for CursorMut&lt;'a, A&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, A&gt; !Send for Iter&lt;'a, A&gt;","synthetic":true,"types":[]},{"text":"impl&lt;A&gt; Send for IntoIter&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;A as Adapter&gt;::Pointer: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, A&gt; !Send for Cursor&lt;'a, A&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, A&gt; !Send for CursorMut&lt;'a, A&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, A&gt; !Send for InsertCursor&lt;'a, A&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, A&gt; !Send for Iter&lt;'a, A&gt;","synthetic":true,"types":[]},{"text":"impl&lt;A&gt; !Send for IntoIter&lt;A&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, A&gt; !Send for Entry&lt;'a, A&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, A&gt; !Send for Cursor&lt;'a, A&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, A&gt; !Send for CursorMut&lt;'a, A&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, A&gt; !Send for Iter&lt;'a, A&gt;","synthetic":true,"types":[]},{"text":"impl&lt;A&gt; Send for IntoIter&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;A as Adapter&gt;::Pointer: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, A&gt; !Send for Cursor&lt;'a, A&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, A&gt; !Send for CursorMut&lt;'a, A&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, A&gt; !Send for Iter&lt;'a, A&gt;","synthetic":true,"types":[]},{"text":"impl&lt;A&gt; Send for IntoIter&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;A as Adapter&gt;::Pointer: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T:&nbsp;?Sized + Send&gt; Send for UnsafeRef&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl Send for Link","synthetic":false,"types":[]},{"text":"impl&lt;A:&nbsp;Adapter&lt;Link = Link&gt; + Send&gt; Send for LinkedList&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A::Pointer: Send,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl Send for Link","synthetic":false,"types":[]},{"text":"impl&lt;A:&nbsp;Adapter&lt;Link = Link&gt; + Send&gt; Send for RBTree&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A::Pointer: Send,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl Send for Link","synthetic":false,"types":[]},{"text":"impl&lt;A:&nbsp;Adapter&lt;Link = Link&gt; + Send&gt; Send for SinglyLinkedList&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A::Pointer: Send,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl Send for Link","synthetic":false,"types":[]},{"text":"impl&lt;A:&nbsp;Adapter&lt;Link = Link&gt; + Send&gt; Send for XorLinkedList&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A::Pointer: Send,&nbsp;</span>","synthetic":false,"types":[]}];
implementors["io_context"] = [{"text":"impl Send for Context","synthetic":true,"types":[]},{"text":"impl Send for CancelSignal","synthetic":true,"types":[]},{"text":"impl Send for DoneReason","synthetic":true,"types":[]}];
implementors["itoa"] = [{"text":"impl Send for Buffer","synthetic":true,"types":[]}];
implementors["k256"] = [{"text":"impl Send for AffinePoint","synthetic":true,"types":[]},{"text":"impl Send for ProjectivePoint","synthetic":true,"types":[]},{"text":"impl Send for Scalar","synthetic":true,"types":[]},{"text":"impl Send for Secp256k1","synthetic":true,"types":[]},{"text":"impl Send for SigningKey","synthetic":true,"types":[]},{"text":"impl Send for VerifyingKey","synthetic":true,"types":[]},{"text":"impl Send for Signature","synthetic":true,"types":[]},{"text":"impl Send for Id","synthetic":true,"types":[]}];
implementors["libc"] = [{"text":"impl !Send for group","synthetic":true,"types":[]},{"text":"impl Send for utimbuf","synthetic":true,"types":[]},{"text":"impl Send for timeval","synthetic":true,"types":[]},{"text":"impl Send for timespec","synthetic":true,"types":[]},{"text":"impl Send for rlimit","synthetic":true,"types":[]},{"text":"impl Send for rusage","synthetic":true,"types":[]},{"text":"impl Send for ipv6_mreq","synthetic":true,"types":[]},{"text":"impl !Send for hostent","synthetic":true,"types":[]},{"text":"impl !Send for iovec","synthetic":true,"types":[]},{"text":"impl Send for pollfd","synthetic":true,"types":[]},{"text":"impl Send for winsize","synthetic":true,"types":[]},{"text":"impl Send for linger","synthetic":true,"types":[]},{"text":"impl !Send for sigval","synthetic":true,"types":[]},{"text":"impl Send for itimerval","synthetic":true,"types":[]},{"text":"impl Send for tms","synthetic":true,"types":[]},{"text":"impl !Send for servent","synthetic":true,"types":[]},{"text":"impl !Send for protoent","synthetic":true,"types":[]},{"text":"impl Send for sockaddr","synthetic":true,"types":[]},{"text":"impl Send for sockaddr_in6","synthetic":true,"types":[]},{"text":"impl !Send for passwd","synthetic":true,"types":[]},{"text":"impl !Send for ifaddrs","synthetic":true,"types":[]},{"text":"impl Send for fd_set","synthetic":true,"types":[]},{"text":"impl !Send for tm","synthetic":true,"types":[]},{"text":"impl !Send for msghdr","synthetic":true,"types":[]},{"text":"impl Send for cmsghdr","synthetic":true,"types":[]},{"text":"impl Send for fsid_t","synthetic":true,"types":[]},{"text":"impl !Send for if_nameindex","synthetic":true,"types":[]},{"text":"impl !Send for regex_t","synthetic":true,"types":[]},{"text":"impl Send for regmatch_t","synthetic":true,"types":[]},{"text":"impl Send for sockaddr_un","synthetic":true,"types":[]},{"text":"impl Send for utsname","synthetic":true,"types":[]},{"text":"impl Send for ip_mreq","synthetic":true,"types":[]},{"text":"impl !Send for aiocb","synthetic":true,"types":[]},{"text":"impl !Send for glob_t","synthetic":true,"types":[]},{"text":"impl !Send for addrinfo","synthetic":true,"types":[]},{"text":"impl Send for mach_timebase_info","synthetic":true,"types":[]},{"text":"impl Send for stat","synthetic":true,"types":[]},{"text":"impl Send for pthread_mutexattr_t","synthetic":true,"types":[]},{"text":"impl Send for pthread_condattr_t","synthetic":true,"types":[]},{"text":"impl Send for pthread_rwlockattr_t","synthetic":true,"types":[]},{"text":"impl !Send for siginfo_t","synthetic":true,"types":[]},{"text":"impl Send for sigaction","synthetic":true,"types":[]},{"text":"impl !Send for stack_t","synthetic":true,"types":[]},{"text":"impl Send for fstore_t","synthetic":true,"types":[]},{"text":"impl Send for radvisory","synthetic":true,"types":[]},{"text":"impl Send for statvfs","synthetic":true,"types":[]},{"text":"impl !Send for Dl_info","synthetic":true,"types":[]},{"text":"impl Send for sockaddr_in","synthetic":true,"types":[]},{"text":"impl Send for kevent64_s","synthetic":true,"types":[]},{"text":"impl Send for dqblk","synthetic":true,"types":[]},{"text":"impl Send for if_msghdr","synthetic":true,"types":[]},{"text":"impl Send for termios","synthetic":true,"types":[]},{"text":"impl Send for flock","synthetic":true,"types":[]},{"text":"impl !Send for sf_hdtr","synthetic":true,"types":[]},{"text":"impl !Send for lconv","synthetic":true,"types":[]},{"text":"impl Send for proc_taskinfo","synthetic":true,"types":[]},{"text":"impl Send for proc_bsdinfo","synthetic":true,"types":[]},{"text":"impl Send for proc_taskallinfo","synthetic":true,"types":[]},{"text":"impl Send for xsw_usage","synthetic":true,"types":[]},{"text":"impl Send for xucred","synthetic":true,"types":[]},{"text":"impl Send for mach_header","synthetic":true,"types":[]},{"text":"impl Send for mach_header_64","synthetic":true,"types":[]},{"text":"impl Send for segment_command","synthetic":true,"types":[]},{"text":"impl Send for segment_command_64","synthetic":true,"types":[]},{"text":"impl Send for load_command","synthetic":true,"types":[]},{"text":"impl Send for sockaddr_dl","synthetic":true,"types":[]},{"text":"impl Send for sockaddr_inarp","synthetic":true,"types":[]},{"text":"impl Send for sockaddr_ctl","synthetic":true,"types":[]},{"text":"impl Send for in_pktinfo","synthetic":true,"types":[]},{"text":"impl Send for in6_pktinfo","synthetic":true,"types":[]},{"text":"impl Send for ipc_perm","synthetic":true,"types":[]},{"text":"impl Send for sembuf","synthetic":true,"types":[]},{"text":"impl Send for arphdr","synthetic":true,"types":[]},{"text":"impl Send for in_addr","synthetic":true,"types":[]},{"text":"impl !Send for sa_endpoints_t","synthetic":true,"types":[]},{"text":"impl Send for timex","synthetic":true,"types":[]},{"text":"impl Send for ntptimeval","synthetic":true,"types":[]},{"text":"impl !Send for kevent","synthetic":true,"types":[]},{"text":"impl Send for semid_ds","synthetic":true,"types":[]},{"text":"impl !Send for shmid_ds","synthetic":true,"types":[]},{"text":"impl Send for proc_threadinfo","synthetic":true,"types":[]},{"text":"impl Send for statfs","synthetic":true,"types":[]},{"text":"impl Send for dirent","synthetic":true,"types":[]},{"text":"impl Send for pthread_rwlock_t","synthetic":true,"types":[]},{"text":"impl Send for pthread_mutex_t","synthetic":true,"types":[]},{"text":"impl Send for pthread_cond_t","synthetic":true,"types":[]},{"text":"impl Send for sockaddr_storage","synthetic":true,"types":[]},{"text":"impl Send for utmpx","synthetic":true,"types":[]},{"text":"impl !Send for sigevent","synthetic":true,"types":[]},{"text":"impl Send for timeval32","synthetic":true,"types":[]},{"text":"impl Send for if_data","synthetic":true,"types":[]},{"text":"impl Send for bpf_hdr","synthetic":true,"types":[]},{"text":"impl Send for pthread_attr_t","synthetic":true,"types":[]},{"text":"impl !Send for ucontext_t","synthetic":true,"types":[]},{"text":"impl Send for __darwin_mcontext64","synthetic":true,"types":[]},{"text":"impl Send for __darwin_x86_exception_state64","synthetic":true,"types":[]},{"text":"impl Send for __darwin_x86_thread_state64","synthetic":true,"types":[]},{"text":"impl Send for __darwin_x86_float_state64","synthetic":true,"types":[]},{"text":"impl Send for __darwin_mmst_reg","synthetic":true,"types":[]},{"text":"impl Send for __darwin_xmm_reg","synthetic":true,"types":[]},{"text":"impl Send for max_align_t","synthetic":true,"types":[]},{"text":"impl Send for in6_addr","synthetic":true,"types":[]},{"text":"impl !Send for semun","synthetic":true,"types":[]},{"text":"impl Send for DIR","synthetic":true,"types":[]},{"text":"impl Send for FILE","synthetic":true,"types":[]},{"text":"impl Send for fpos_t","synthetic":true,"types":[]},{"text":"impl Send for timezone","synthetic":true,"types":[]}];
implementors["log"] = [{"text":"impl&lt;'a&gt; !Send for Record&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !Send for RecordBuilder&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for Metadata&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for MetadataBuilder&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Send for SetLoggerError","synthetic":true,"types":[]},{"text":"impl Send for ParseLevelError","synthetic":true,"types":[]},{"text":"impl Send for Level","synthetic":true,"types":[]},{"text":"impl Send for LevelFilter","synthetic":true,"types":[]}];
implementors["num_bigint"] = [{"text":"impl Send for ParseBigIntError","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for TryFromBigIntError&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for BigUint","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for U32Digits&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for U64Digits&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Send for BigInt","synthetic":true,"types":[]},{"text":"impl Send for Sign","synthetic":true,"types":[]}];
implementors["num_integer"] = [{"text":"impl&lt;A&gt; Send for ExtendedGcd&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for IterBinomial&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["num_traits"] = [{"text":"impl Send for ParseFloatError","synthetic":true,"types":[]},{"text":"impl Send for FloatErrorKind","synthetic":true,"types":[]}];
implementors["oasis_core_runtime"] = [{"text":"impl Send for BUILD_INFO","synthetic":true,"types":[]},{"text":"impl Send for BuildInfo","synthetic":true,"types":[]},{"text":"impl Send for Hash","synthetic":true,"types":[]},{"text":"impl Send for Nonce","synthetic":true,"types":[]},{"text":"impl Send for PublicKey","synthetic":true,"types":[]},{"text":"impl Send for PrivateKey","synthetic":true,"types":[]},{"text":"impl Send for Signature","synthetic":true,"types":[]},{"text":"impl Send for SignatureBundle","synthetic":true,"types":[]},{"text":"impl Send for Namespace","synthetic":true,"types":[]},{"text":"impl Send for Quantity","synthetic":true,"types":[]},{"text":"impl Send for MrEnclave","synthetic":true,"types":[]},{"text":"impl Send for MrSigner","synthetic":true,"types":[]},{"text":"impl Send for AVR","synthetic":true,"types":[]},{"text":"impl Send for AuthenticatedAVR","synthetic":true,"types":[]},{"text":"impl Send for EnclaveIdentity","synthetic":true,"types":[]},{"text":"impl Send for Version","synthetic":true,"types":[]},{"text":"impl Send for Address","synthetic":true,"types":[]},{"text":"impl Send for ExecutorParameters","synthetic":true,"types":[]},{"text":"impl Send for TxnSchedulerParameters","synthetic":true,"types":[]},{"text":"impl Send for StorageParameters","synthetic":true,"types":[]},{"text":"impl Send for SchedulingConstraints","synthetic":true,"types":[]},{"text":"impl Send for ValidatorSetConstraint","synthetic":true,"types":[]},{"text":"impl Send for MaxNodesConstraint","synthetic":true,"types":[]},{"text":"impl Send for MinPoolSizeConstraint","synthetic":true,"types":[]},{"text":"impl Send for RuntimeStakingParameters","synthetic":true,"types":[]},{"text":"impl Send for EntityWhitelistRuntimeAdmissionPolicy","synthetic":true,"types":[]},{"text":"impl Send for EntityWhitelistConfig","synthetic":true,"types":[]},{"text":"impl Send for VersionInfo","synthetic":true,"types":[]},{"text":"impl Send for Runtime","synthetic":true,"types":[]},{"text":"impl Send for RuntimeGenesis","synthetic":true,"types":[]},{"text":"impl Send for RuntimeKind","synthetic":true,"types":[]},{"text":"impl Send for RolesMask","synthetic":true,"types":[]},{"text":"impl Send for RuntimeAdmissionPolicy","synthetic":true,"types":[]},{"text":"impl Send for RuntimeGovernanceModel","synthetic":true,"types":[]},{"text":"impl Send for TEEHardware","synthetic":true,"types":[]},{"text":"impl Send for Block","synthetic":true,"types":[]},{"text":"impl Send for AnnotatedBlock","synthetic":true,"types":[]},{"text":"impl Send for MessageEvent","synthetic":true,"types":[]},{"text":"impl Send for RoundResults","synthetic":true,"types":[]},{"text":"impl Send for Header","synthetic":true,"types":[]},{"text":"impl Send for ComputeResultsHeader","synthetic":true,"types":[]},{"text":"impl Send for HeaderType","synthetic":true,"types":[]},{"text":"impl Send for Message","synthetic":true,"types":[]},{"text":"impl Send for StakingMessage","synthetic":true,"types":[]},{"text":"impl Send for RegistryMessage","synthetic":true,"types":[]},{"text":"impl Send for Role","synthetic":true,"types":[]},{"text":"impl Send for CommitteeKind","synthetic":true,"types":[]},{"text":"impl Send for Transfer","synthetic":true,"types":[]},{"text":"impl Send for Withdraw","synthetic":true,"types":[]},{"text":"impl Send for Escrow","synthetic":true,"types":[]},{"text":"impl Send for ReclaimEscrow","synthetic":true,"types":[]},{"text":"impl Send for ThresholdKind","synthetic":true,"types":[]},{"text":"impl Send for Dispatcher","synthetic":true,"types":[]},{"text":"impl !Send for Context","synthetic":true,"types":[]},{"text":"impl Send for Demux","synthetic":true,"types":[]},{"text":"impl Send for MethodDescriptor","synthetic":true,"types":[]},{"text":"impl !Send for Method","synthetic":true,"types":[]},{"text":"impl !Send for Dispatcher","synthetic":true,"types":[]},{"text":"impl Send for SessionInfo","synthetic":true,"types":[]},{"text":"impl Send for Session","synthetic":true,"types":[]},{"text":"impl Send for RAKBinding","synthetic":true,"types":[]},{"text":"impl Send for Builder","synthetic":true,"types":[]},{"text":"impl Send for SessionID","synthetic":true,"types":[]},{"text":"impl Send for Frame","synthetic":true,"types":[]},{"text":"impl Send for Request","synthetic":true,"types":[]},{"text":"impl Send for Error","synthetic":true,"types":[]},{"text":"impl Send for Response","synthetic":true,"types":[]},{"text":"impl Send for Body","synthetic":true,"types":[]},{"text":"impl Send for Message","synthetic":true,"types":[]},{"text":"impl !Send for Executor","synthetic":true,"types":[]},{"text":"impl Send for HostInfo","synthetic":true,"types":[]},{"text":"impl Send for Protocol","synthetic":true,"types":[]},{"text":"impl Send for ProtocolUntrustedLocalStorage","synthetic":true,"types":[]},{"text":"impl Send for ProtocolError","synthetic":true,"types":[]},{"text":"impl Send for RAK","synthetic":true,"types":[]},{"text":"impl Send for StorageContext","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for OverlayTree&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for Root","synthetic":true,"types":[]},{"text":"impl Send for LogEntry","synthetic":true,"types":[]},{"text":"impl Send for Prefix","synthetic":true,"types":[]},{"text":"impl !Send for NodeBox","synthetic":true,"types":[]},{"text":"impl Send for RootType","synthetic":true,"types":[]},{"text":"impl Send for LogEntryKind","synthetic":true,"types":[]},{"text":"impl Send for HostReadSyncer","synthetic":true,"types":[]},{"text":"impl Send for NoopReadSyncer","synthetic":true,"types":[]},{"text":"impl Send for RawProofEntry","synthetic":true,"types":[]},{"text":"impl Send for Proof","synthetic":true,"types":[]},{"text":"impl Send for ProofVerifier","synthetic":true,"types":[]},{"text":"impl !Send for StatsCollector","synthetic":true,"types":[]},{"text":"impl Send for TreeID","synthetic":true,"types":[]},{"text":"impl Send for GetRequest","synthetic":true,"types":[]},{"text":"impl Send for GetPrefixesRequest","synthetic":true,"types":[]},{"text":"impl Send for IterateRequest","synthetic":true,"types":[]},{"text":"impl Send for ProofResponse","synthetic":true,"types":[]},{"text":"impl Send for SyncerError","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !Send for Context&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Send for ExecuteTxResult","synthetic":true,"types":[]},{"text":"impl Send for ExecuteBatchResult","synthetic":true,"types":[]},{"text":"impl Send for NoopDispatcher","synthetic":true,"types":[]},{"text":"impl Send for CheckOnlySuccess","synthetic":true,"types":[]},{"text":"impl Send for MethodDescriptor","synthetic":true,"types":[]},{"text":"impl !Send for Method","synthetic":true,"types":[]},{"text":"impl !Send for MethodDispatcher","synthetic":true,"types":[]},{"text":"impl Send for CoarsenedKey","synthetic":true,"types":[]},{"text":"impl Send for ReadWriteSet","synthetic":true,"types":[]},{"text":"impl Send for Tag","synthetic":true,"types":[]},{"text":"impl Send for Tree","synthetic":true,"types":[]},{"text":"impl Send for TxnCall","synthetic":true,"types":[]},{"text":"impl Send for TxnCheckResult","synthetic":true,"types":[]},{"text":"impl Send for TxnBatch","synthetic":true,"types":[]},{"text":"impl Send for TxnOutput","synthetic":true,"types":[]},{"text":"impl Send for ComputedBatch","synthetic":true,"types":[]},{"text":"impl Send for Error","synthetic":true,"types":[]},{"text":"impl Send for CheckTxResult","synthetic":true,"types":[]},{"text":"impl Send for Message","synthetic":true,"types":[]},{"text":"impl Send for StorageSyncRequest","synthetic":true,"types":[]},{"text":"impl Send for StorageSyncResponse","synthetic":true,"types":[]},{"text":"impl Send for HostStorageEndpoint","synthetic":true,"types":[]},{"text":"impl Send for Body","synthetic":true,"types":[]},{"text":"impl Send for MessageType","synthetic":true,"types":[]},{"text":"impl Send for Tree","synthetic":false,"types":[]}];
implementors["oasis_runtime_sdk"] = [{"text":"impl&lt;'a&gt; !Send for DispatchContext&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, 'b&gt; !Send for TxContext&lt;'a, 'b&gt;","synthetic":true,"types":[]},{"text":"impl Send for Error","synthetic":true,"types":[]},{"text":"impl Send for Mode","synthetic":true,"types":[]},{"text":"impl Send for Signature","synthetic":true,"types":[]},{"text":"impl Send for PublicKey","synthetic":true,"types":[]},{"text":"impl Send for Error","synthetic":true,"types":[]},{"text":"impl Send for PublicKey","synthetic":true,"types":[]},{"text":"impl Send for PublicKey","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Send for Dispatcher&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for Error","synthetic":true,"types":[]},{"text":"impl Send for CallableMethodInfo","synthetic":true,"types":[]},{"text":"impl Send for QueryMethodInfo","synthetic":true,"types":[]},{"text":"impl Send for MethodRegistry","synthetic":true,"types":[]},{"text":"impl Send for Parameters","synthetic":true,"types":[]},{"text":"impl Send for Genesis","synthetic":true,"types":[]},{"text":"impl Send for Module","synthetic":true,"types":[]},{"text":"impl Send for Error","synthetic":true,"types":[]},{"text":"impl Send for Event","synthetic":true,"types":[]},{"text":"impl Send for Transfer","synthetic":true,"types":[]},{"text":"impl Send for Account","synthetic":true,"types":[]},{"text":"impl Send for NonceQuery","synthetic":true,"types":[]},{"text":"impl Send for BalancesQuery","synthetic":true,"types":[]},{"text":"impl Send for AccountBalances","synthetic":true,"types":[]},{"text":"impl Send for Error","synthetic":true,"types":[]},{"text":"impl Send for Metadata","synthetic":true,"types":[]},{"text":"impl&lt;M&gt; Send for MKVSStore&lt;M&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;M: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; Send for OverlayStore&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'store, S&gt; Send for PrefixStore&lt;'store, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; Send for TypedStore&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for Mock","synthetic":true,"types":[]},{"text":"impl Send for Address","synthetic":true,"types":[]},{"text":"impl Send for Error","synthetic":true,"types":[]},{"text":"impl Send for Denomination","synthetic":true,"types":[]},{"text":"impl Send for BaseUnits","synthetic":true,"types":[]},{"text":"impl Send for Error","synthetic":true,"types":[]},{"text":"impl Send for UnverifiedTransaction","synthetic":true,"types":[]},{"text":"impl Send for Transaction","synthetic":true,"types":[]},{"text":"impl Send for Call","synthetic":true,"types":[]},{"text":"impl Send for AuthInfo","synthetic":true,"types":[]},{"text":"impl Send for Fee","synthetic":true,"types":[]},{"text":"impl Send for SignerInfo","synthetic":true,"types":[]},{"text":"impl Send for Error","synthetic":true,"types":[]},{"text":"impl Send for CallResult","synthetic":true,"types":[]}];
implementors["once_cell"] = [{"text":"impl&lt;T&gt; Send for OnceCell&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, F&gt; Send for Lazy&lt;T, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for OnceCell&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, F&gt; Send for Lazy&lt;T, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for OnceNonZeroUsize","synthetic":true,"types":[]},{"text":"impl Send for OnceBool","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for OnceBox&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["pem"] = [{"text":"impl Send for EncodeConfig","synthetic":true,"types":[]},{"text":"impl Send for Pem","synthetic":true,"types":[]},{"text":"impl Send for PemError","synthetic":true,"types":[]},{"text":"impl Send for LineEnding","synthetic":true,"types":[]}];
implementors["percent_encoding"] = [{"text":"impl Send for AsciiSet","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for PercentEncode&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for PercentDecode&lt;'a&gt;","synthetic":true,"types":[]}];
implementors["pkcs8"] = [{"text":"impl Send for AlgorithmIdentifier","synthetic":true,"types":[]},{"text":"impl Send for Error","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for PrivateKeyInfo&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for SubjectPublicKeyInfo&lt;'a&gt;","synthetic":true,"types":[]}];
implementors["poly1305"] = [{"text":"impl Send for Poly1305","synthetic":true,"types":[]}];
implementors["polyval"] = [{"text":"impl Send for Polyval","synthetic":true,"types":[]}];
implementors["ppv_lite86"] = [{"text":"impl Send for YesS3","synthetic":true,"types":[]},{"text":"impl Send for NoS3","synthetic":true,"types":[]},{"text":"impl Send for YesS4","synthetic":true,"types":[]},{"text":"impl Send for NoS4","synthetic":true,"types":[]},{"text":"impl Send for YesA1","synthetic":true,"types":[]},{"text":"impl Send for NoA1","synthetic":true,"types":[]},{"text":"impl Send for YesA2","synthetic":true,"types":[]},{"text":"impl Send for NoA2","synthetic":true,"types":[]},{"text":"impl Send for YesNI","synthetic":true,"types":[]},{"text":"impl Send for NoNI","synthetic":true,"types":[]},{"text":"impl&lt;S3, S4, NI&gt; Send for SseMachine&lt;S3, S4, NI&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;NI: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;S3: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;S4: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;NI&gt; Send for Avx2Machine&lt;NI&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;NI: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for vec128_storage","synthetic":true,"types":[]},{"text":"impl Send for vec256_storage","synthetic":true,"types":[]},{"text":"impl Send for vec512_storage","synthetic":true,"types":[]}];
implementors["proc_macro2"] = [{"text":"impl !Send for TokenStream","synthetic":true,"types":[]},{"text":"impl !Send for LexError","synthetic":true,"types":[]},{"text":"impl !Send for Span","synthetic":true,"types":[]},{"text":"impl !Send for Group","synthetic":true,"types":[]},{"text":"impl !Send for Punct","synthetic":true,"types":[]},{"text":"impl !Send for Ident","synthetic":true,"types":[]},{"text":"impl !Send for Literal","synthetic":true,"types":[]},{"text":"impl !Send for TokenTree","synthetic":true,"types":[]},{"text":"impl Send for Delimiter","synthetic":true,"types":[]},{"text":"impl Send for Spacing","synthetic":true,"types":[]},{"text":"impl !Send for IntoIter","synthetic":true,"types":[]}];
implementors["rand"] = [{"text":"impl Send for Bernoulli","synthetic":true,"types":[]},{"text":"impl Send for Open01","synthetic":true,"types":[]},{"text":"impl Send for OpenClosed01","synthetic":true,"types":[]},{"text":"impl Send for Alphanumeric","synthetic":true,"types":[]},{"text":"impl&lt;X&gt; Send for Uniform&lt;X&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;X as SampleUniform&gt;::Sampler: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for Binomial","synthetic":true,"types":[]},{"text":"impl Send for Cauchy","synthetic":true,"types":[]},{"text":"impl Send for Dirichlet","synthetic":true,"types":[]},{"text":"impl Send for Exp","synthetic":true,"types":[]},{"text":"impl Send for Exp1","synthetic":true,"types":[]},{"text":"impl Send for Beta","synthetic":true,"types":[]},{"text":"impl Send for ChiSquared","synthetic":true,"types":[]},{"text":"impl Send for FisherF","synthetic":true,"types":[]},{"text":"impl Send for Gamma","synthetic":true,"types":[]},{"text":"impl Send for StudentT","synthetic":true,"types":[]},{"text":"impl Send for LogNormal","synthetic":true,"types":[]},{"text":"impl Send for Normal","synthetic":true,"types":[]},{"text":"impl Send for StandardNormal","synthetic":true,"types":[]},{"text":"impl Send for Pareto","synthetic":true,"types":[]},{"text":"impl Send for Poisson","synthetic":true,"types":[]},{"text":"impl Send for Triangular","synthetic":true,"types":[]},{"text":"impl Send for UnitCircle","synthetic":true,"types":[]},{"text":"impl Send for UnitSphereSurface","synthetic":true,"types":[]},{"text":"impl Send for Weibull","synthetic":true,"types":[]},{"text":"impl&lt;D, R, T&gt; Send for DistIter&lt;D, R, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;D: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for Standard","synthetic":true,"types":[]},{"text":"impl Send for BernoulliError","synthetic":true,"types":[]},{"text":"impl&lt;X&gt; Send for UniformInt&lt;X&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;X: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;X&gt; Send for UniformFloat&lt;X&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;X: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for UniformDuration","synthetic":true,"types":[]},{"text":"impl&lt;X&gt; Send for WeightedIndex&lt;X&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;X: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;X as SampleUniform&gt;::Sampler: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for WeightedError","synthetic":true,"types":[]},{"text":"impl&lt;W&gt; Send for WeightedIndex&lt;W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;W: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;W as SampleUniform&gt;::Sampler: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for EntropyRng","synthetic":true,"types":[]},{"text":"impl Send for StdRng","synthetic":true,"types":[]},{"text":"impl !Send for ThreadRng","synthetic":true,"types":[]},{"text":"impl Send for ReadError","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Send for ReadRng&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R, Rsdr&gt; Send for ReseedingRng&lt;R, Rsdr&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;Rsdr: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;R as BlockRngCore&gt;::Results: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for StepRng","synthetic":true,"types":[]},{"text":"impl&lt;'a, S:&nbsp;?Sized, T&gt; Send for SliceChooseIter&lt;'a, S, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for IndexVec","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for IndexVecIter&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Send for IndexVecIntoIter","synthetic":true,"types":[]}];
implementors["rand_chacha"] = [{"text":"impl Send for ChaCha12Core","synthetic":true,"types":[]},{"text":"impl Send for ChaCha12Rng","synthetic":true,"types":[]},{"text":"impl Send for ChaCha20Core","synthetic":true,"types":[]},{"text":"impl Send for ChaCha20Rng","synthetic":true,"types":[]},{"text":"impl Send for ChaCha8Core","synthetic":true,"types":[]},{"text":"impl Send for ChaCha8Rng","synthetic":true,"types":[]}];
implementors["rand_core"] = [{"text":"impl Send for Error","synthetic":true,"types":[]},{"text":"impl Send for OsRng","synthetic":true,"types":[]},{"text":"impl&lt;R:&nbsp;?Sized&gt; Send for BlockRng&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;R as BlockRngCore&gt;::Results: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R:&nbsp;?Sized&gt; Send for BlockRng64&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;R as BlockRngCore&gt;::Results: Send,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["regex"] = [{"text":"impl Send for RegexSetBuilder","synthetic":true,"types":[]},{"text":"impl Send for RegexBuilder","synthetic":true,"types":[]},{"text":"impl Send for RegexSet","synthetic":true,"types":[]},{"text":"impl Send for SetMatches","synthetic":true,"types":[]},{"text":"impl Send for SetMatchesIntoIter","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for SetMatchesIter&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Send for CaptureLocations","synthetic":true,"types":[]},{"text":"impl&lt;'r, 't&gt; Send for CaptureMatches&lt;'r, 't&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'r&gt; Send for CaptureNames&lt;'r&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'t&gt; Send for Captures&lt;'t&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'t&gt; Send for Match&lt;'t&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'r, 't&gt; Send for Matches&lt;'r, 't&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'t&gt; Send for NoExpand&lt;'t&gt;","synthetic":true,"types":[]},{"text":"impl Send for Regex","synthetic":true,"types":[]},{"text":"impl&lt;'a, R:&nbsp;?Sized&gt; Send for ReplacerRef&lt;'a, R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'r, 't&gt; Send for Split&lt;'r, 't&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'r, 't&gt; Send for SplitN&lt;'r, 't&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'c, 't&gt; Send for SubCaptureMatches&lt;'c, 't&gt;","synthetic":true,"types":[]},{"text":"impl Send for Error","synthetic":true,"types":[]},{"text":"impl Send for RegexBuilder","synthetic":true,"types":[]},{"text":"impl Send for RegexSetBuilder","synthetic":true,"types":[]},{"text":"impl&lt;'t&gt; Send for Match&lt;'t&gt;","synthetic":true,"types":[]},{"text":"impl Send for Regex","synthetic":true,"types":[]},{"text":"impl&lt;'r, 't&gt; Send for Matches&lt;'r, 't&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'r, 't&gt; Send for CaptureMatches&lt;'r, 't&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'r, 't&gt; Send for Split&lt;'r, 't&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'r, 't&gt; Send for SplitN&lt;'r, 't&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'r&gt; Send for CaptureNames&lt;'r&gt;","synthetic":true,"types":[]},{"text":"impl Send for CaptureLocations","synthetic":true,"types":[]},{"text":"impl&lt;'t&gt; Send for Captures&lt;'t&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'c, 't&gt; Send for SubCaptureMatches&lt;'c, 't&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, R:&nbsp;?Sized&gt; Send for ReplacerRef&lt;'a, R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'t&gt; Send for NoExpand&lt;'t&gt;","synthetic":true,"types":[]},{"text":"impl Send for RegexSet","synthetic":true,"types":[]},{"text":"impl Send for SetMatches","synthetic":true,"types":[]},{"text":"impl Send for SetMatchesIntoIter","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for SetMatchesIter&lt;'a&gt;","synthetic":true,"types":[]}];
implementors["regex_syntax"] = [{"text":"impl Send for Parser","synthetic":true,"types":[]},{"text":"impl Send for ParserBuilder","synthetic":true,"types":[]},{"text":"impl Send for UnicodeWordError","synthetic":true,"types":[]},{"text":"impl Send for Error","synthetic":true,"types":[]},{"text":"impl Send for Error","synthetic":true,"types":[]},{"text":"impl Send for Span","synthetic":true,"types":[]},{"text":"impl Send for Position","synthetic":true,"types":[]},{"text":"impl Send for WithComments","synthetic":true,"types":[]},{"text":"impl Send for Comment","synthetic":true,"types":[]},{"text":"impl Send for Alternation","synthetic":true,"types":[]},{"text":"impl Send for Concat","synthetic":true,"types":[]},{"text":"impl Send for Literal","synthetic":true,"types":[]},{"text":"impl Send for ClassPerl","synthetic":true,"types":[]},{"text":"impl Send for ClassAscii","synthetic":true,"types":[]},{"text":"impl Send for ClassUnicode","synthetic":true,"types":[]},{"text":"impl Send for ClassBracketed","synthetic":true,"types":[]},{"text":"impl Send for ClassSetRange","synthetic":true,"types":[]},{"text":"impl Send for ClassSetUnion","synthetic":true,"types":[]},{"text":"impl Send for ClassSetBinaryOp","synthetic":true,"types":[]},{"text":"impl Send for Assertion","synthetic":true,"types":[]},{"text":"impl Send for Repetition","synthetic":true,"types":[]},{"text":"impl Send for RepetitionOp","synthetic":true,"types":[]},{"text":"impl Send for Group","synthetic":true,"types":[]},{"text":"impl Send for CaptureName","synthetic":true,"types":[]},{"text":"impl Send for SetFlags","synthetic":true,"types":[]},{"text":"impl Send for Flags","synthetic":true,"types":[]},{"text":"impl Send for FlagsItem","synthetic":true,"types":[]},{"text":"impl Send for ErrorKind","synthetic":true,"types":[]},{"text":"impl Send for Ast","synthetic":true,"types":[]},{"text":"impl Send for LiteralKind","synthetic":true,"types":[]},{"text":"impl Send for SpecialLiteralKind","synthetic":true,"types":[]},{"text":"impl Send for HexLiteralKind","synthetic":true,"types":[]},{"text":"impl Send for Class","synthetic":true,"types":[]},{"text":"impl Send for ClassPerlKind","synthetic":true,"types":[]},{"text":"impl Send for ClassAsciiKind","synthetic":true,"types":[]},{"text":"impl Send for ClassUnicodeKind","synthetic":true,"types":[]},{"text":"impl Send for ClassUnicodeOpKind","synthetic":true,"types":[]},{"text":"impl Send for ClassSet","synthetic":true,"types":[]},{"text":"impl Send for ClassSetItem","synthetic":true,"types":[]},{"text":"impl Send for ClassSetBinaryOpKind","synthetic":true,"types":[]},{"text":"impl Send for AssertionKind","synthetic":true,"types":[]},{"text":"impl Send for RepetitionKind","synthetic":true,"types":[]},{"text":"impl Send for RepetitionRange","synthetic":true,"types":[]},{"text":"impl Send for GroupKind","synthetic":true,"types":[]},{"text":"impl Send for FlagsItemKind","synthetic":true,"types":[]},{"text":"impl Send for Flag","synthetic":true,"types":[]},{"text":"impl Send for ParserBuilder","synthetic":true,"types":[]},{"text":"impl Send for Parser","synthetic":true,"types":[]},{"text":"impl Send for Printer","synthetic":true,"types":[]},{"text":"impl Send for CaseFoldError","synthetic":true,"types":[]},{"text":"impl Send for Error","synthetic":true,"types":[]},{"text":"impl Send for Hir","synthetic":true,"types":[]},{"text":"impl Send for ClassUnicode","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for ClassUnicodeIter&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Send for ClassUnicodeRange","synthetic":true,"types":[]},{"text":"impl Send for ClassBytes","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for ClassBytesIter&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Send for ClassBytesRange","synthetic":true,"types":[]},{"text":"impl Send for Group","synthetic":true,"types":[]},{"text":"impl Send for Repetition","synthetic":true,"types":[]},{"text":"impl Send for ErrorKind","synthetic":true,"types":[]},{"text":"impl Send for HirKind","synthetic":true,"types":[]},{"text":"impl Send for Literal","synthetic":true,"types":[]},{"text":"impl Send for Class","synthetic":true,"types":[]},{"text":"impl Send for Anchor","synthetic":true,"types":[]},{"text":"impl Send for WordBoundary","synthetic":true,"types":[]},{"text":"impl Send for GroupKind","synthetic":true,"types":[]},{"text":"impl Send for RepetitionKind","synthetic":true,"types":[]},{"text":"impl Send for RepetitionRange","synthetic":true,"types":[]},{"text":"impl Send for Literals","synthetic":true,"types":[]},{"text":"impl Send for Literal","synthetic":true,"types":[]},{"text":"impl Send for Printer","synthetic":true,"types":[]},{"text":"impl Send for TranslatorBuilder","synthetic":true,"types":[]},{"text":"impl Send for Translator","synthetic":true,"types":[]},{"text":"impl Send for Utf8Range","synthetic":true,"types":[]},{"text":"impl Send for Utf8Sequences","synthetic":true,"types":[]},{"text":"impl Send for Utf8Sequence","synthetic":true,"types":[]}];
implementors["ring"] = [{"text":"impl Send for TestCase","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for File&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Send for Nonce","synthetic":true,"types":[]},{"text":"impl&lt;N&gt; Send for OpeningKey&lt;N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;N&gt; Send for SealingKey&lt;N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A&gt; Send for Aad&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for UnboundKey","synthetic":true,"types":[]},{"text":"impl Send for LessSafeKey","synthetic":true,"types":[]},{"text":"impl Send for Algorithm","synthetic":true,"types":[]},{"text":"impl Send for Tag","synthetic":true,"types":[]},{"text":"impl Send for SealingKey","synthetic":true,"types":[]},{"text":"impl Send for OpeningKey","synthetic":true,"types":[]},{"text":"impl Send for HeaderProtectionKey","synthetic":true,"types":[]},{"text":"impl Send for Algorithm","synthetic":true,"types":[]},{"text":"impl Send for Algorithm","synthetic":true,"types":[]},{"text":"impl Send for EphemeralPrivateKey","synthetic":true,"types":[]},{"text":"impl Send for PublicKey","synthetic":true,"types":[]},{"text":"impl&lt;B&gt; Send for UnparsedPublicKey&lt;B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;B: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for Positive&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Send for Context","synthetic":true,"types":[]},{"text":"impl Send for Digest","synthetic":true,"types":[]},{"text":"impl Send for Algorithm","synthetic":true,"types":[]},{"text":"impl Send for Ed25519KeyPair","synthetic":true,"types":[]},{"text":"impl Send for EdDSAParameters","synthetic":true,"types":[]},{"text":"impl Send for EcdsaSigningAlgorithm","synthetic":true,"types":[]},{"text":"impl Send for EcdsaKeyPair","synthetic":true,"types":[]},{"text":"impl Send for EcdsaVerificationAlgorithm","synthetic":true,"types":[]},{"text":"impl Send for Unspecified","synthetic":true,"types":[]},{"text":"impl Send for KeyRejected","synthetic":true,"types":[]},{"text":"impl Send for Algorithm","synthetic":true,"types":[]},{"text":"impl Send for Salt","synthetic":true,"types":[]},{"text":"impl Send for Prk","synthetic":true,"types":[]},{"text":"impl&lt;'a, L&gt; Send for Okm&lt;'a, L&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;L: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for Algorithm","synthetic":true,"types":[]},{"text":"impl Send for Tag","synthetic":true,"types":[]},{"text":"impl Send for Key","synthetic":true,"types":[]},{"text":"impl Send for Context","synthetic":true,"types":[]},{"text":"impl Send for Algorithm","synthetic":true,"types":[]},{"text":"impl Send for Document","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for Random&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for SystemRandom","synthetic":true,"types":[]},{"text":"impl Send for RsaParameters","synthetic":true,"types":[]},{"text":"impl&lt;B&gt; Send for RsaPublicKeyComponents&lt;B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;B: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for RsaKeyPair","synthetic":true,"types":[]},{"text":"impl Send for RsaSubjectPublicKey","synthetic":true,"types":[]},{"text":"impl Send for Signature","synthetic":true,"types":[]},{"text":"impl&lt;B&gt; Send for UnparsedPublicKey&lt;B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;B: Send,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["rustc_hex"] = [{"text":"impl&lt;T&gt; Send for ToHexIter&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for FromHexIter&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Send for FromHexError","synthetic":true,"types":[]}];
implementors["ryu"] = [{"text":"impl Send for Buffer","synthetic":true,"types":[]}];
implementors["scopeguard"] = [{"text":"impl&lt;T, F, S&gt; Send for ScopeGuard&lt;T, F, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for Always","synthetic":true,"types":[]}];
implementors["serde"] = [{"text":"impl Send for IgnoredAny","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for Unexpected&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Send for Error","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Send for UnitDeserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Send for BoolDeserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Send for I8Deserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Send for I16Deserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Send for I32Deserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Send for I64Deserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Send for IsizeDeserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Send for U8Deserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Send for U16Deserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Send for U64Deserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Send for UsizeDeserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Send for F32Deserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Send for F64Deserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Send for CharDeserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Send for I128Deserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Send for U128Deserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Send for U32Deserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, E&gt; Send for StrDeserializer&lt;'a, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'de, E&gt; Send for BorrowedStrDeserializer&lt;'de, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Send for StringDeserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, E&gt; Send for CowStrDeserializer&lt;'a, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, E&gt; Send for BytesDeserializer&lt;'a, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'de, E&gt; Send for BorrowedBytesDeserializer&lt;'de, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, E&gt; Send for SeqDeserializer&lt;I, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A&gt; Send for SeqAccessDeserializer&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'de, I, E&gt; Send for MapDeserializer&lt;'de, I, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt;I as Iterator&gt;::Item as Pair&gt;::Second: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A&gt; Send for MapAccessDeserializer&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Ok, Error&gt; Send for Impossible&lt;Ok, Error&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Error: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;Ok: Send,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["serde_bytes"] = [{"text":"impl Send for Bytes","synthetic":true,"types":[]},{"text":"impl Send for ByteBuf","synthetic":true,"types":[]}];
implementors["serde_cbor"] = [{"text":"impl&lt;R&gt; Send for Deserializer&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'de, R, T&gt; Send for StreamDeserializer&lt;'de, R, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for Error","synthetic":true,"types":[]},{"text":"impl&lt;W&gt; Send for Serializer&lt;W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;W: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for Value","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Send for IoRead&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for SliceRead&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for MutSliceRead&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, 'b&gt; Send for SliceReadFixed&lt;'a, 'b&gt;","synthetic":true,"types":[]},{"text":"impl Send for Category","synthetic":true,"types":[]},{"text":"impl&lt;W&gt; Send for IoWrite&lt;W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;W: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for SliceWrite&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for Tagged&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["serde_json"] = [{"text":"impl&lt;R&gt; Send for Deserializer&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'de, R, T&gt; Send for StreamDeserializer&lt;'de, R, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for Error","synthetic":true,"types":[]},{"text":"impl&lt;W, F&gt; Send for Serializer&lt;W, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;W: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;K, V&gt; Send for Map&lt;K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for Number","synthetic":true,"types":[]},{"text":"impl Send for Value","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for SliceRead&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for StrRead&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Send for IoRead&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for Category","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for VacantEntry&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for OccupiedEntry&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for Iter&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for IterMut&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Send for IntoIter","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for Keys&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for Values&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for ValuesMut&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for Entry&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Send for CompactFormatter","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for PrettyFormatter&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Send for CharEscape","synthetic":true,"types":[]},{"text":"impl Send for Serializer","synthetic":true,"types":[]}];
implementors["sgx_isa"] = [{"text":"impl Send for Secs","synthetic":true,"types":[]},{"text":"impl Send for Attributes","synthetic":true,"types":[]},{"text":"impl Send for AttributesFlags","synthetic":true,"types":[]},{"text":"impl Send for Miscselect","synthetic":true,"types":[]},{"text":"impl Send for Tcs","synthetic":true,"types":[]},{"text":"impl Send for TcsFlags","synthetic":true,"types":[]},{"text":"impl Send for Pageinfo","synthetic":true,"types":[]},{"text":"impl Send for Secinfo","synthetic":true,"types":[]},{"text":"impl Send for SecinfoFlags","synthetic":true,"types":[]},{"text":"impl Send for Pcmd","synthetic":true,"types":[]},{"text":"impl Send for Sigstruct","synthetic":true,"types":[]},{"text":"impl Send for Einittoken","synthetic":true,"types":[]},{"text":"impl Send for Report","synthetic":true,"types":[]},{"text":"impl Send for Targetinfo","synthetic":true,"types":[]},{"text":"impl Send for Keyrequest","synthetic":true,"types":[]},{"text":"impl Send for Keypolicy","synthetic":true,"types":[]},{"text":"impl Send for Encls","synthetic":true,"types":[]},{"text":"impl Send for Enclu","synthetic":true,"types":[]},{"text":"impl Send for ErrorCode","synthetic":true,"types":[]},{"text":"impl Send for PageType","synthetic":true,"types":[]},{"text":"impl Send for Keyname","synthetic":true,"types":[]}];
implementors["sha2"] = [{"text":"impl Send for Sha224","synthetic":true,"types":[]},{"text":"impl Send for Sha256","synthetic":true,"types":[]},{"text":"impl Send for Sha384","synthetic":true,"types":[]},{"text":"impl Send for Sha512","synthetic":true,"types":[]},{"text":"impl Send for Sha512Trunc224","synthetic":true,"types":[]},{"text":"impl Send for Sha512Trunc256","synthetic":true,"types":[]}];
implementors["signature"] = [{"text":"impl Send for Error","synthetic":true,"types":[]}];
implementors["slog"] = [{"text":"impl&lt;D&gt; Send for Logger&lt;D&gt;","synthetic":true,"types":[]},{"text":"impl Send for Discard","synthetic":true,"types":[]},{"text":"impl&lt;D, F&gt; Send for Filter&lt;D, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;D: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;D&gt; Send for LevelFilter&lt;D&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;D: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;D, E&gt; Send for MapError&lt;D, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;D: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;D1, D2&gt; Send for Duplicate&lt;D1, D2&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;D1: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;D2: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;D&gt; Send for Fuse&lt;D&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;D: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;D&gt; Send for IgnoreResult&lt;D&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;D: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for RecordStatic&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !Send for Record&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;V, F&gt; Send for FnValue&lt;V, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !Send for PushFnValueSerializer&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;F&gt; Send for PushFnValue&lt;F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Send for ErrorValue&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;V&gt; Send for SingleKV&lt;V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;V: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T:&nbsp;?Sized&gt; Send for OwnedKV&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !Send for BorrowedKV&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Send for OwnedKVList","synthetic":true,"types":[]},{"text":"impl&lt;D&gt; Send for MutexDrainError&lt;D&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;D as Drain&gt;::Err: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for Level","synthetic":true,"types":[]},{"text":"impl Send for FilterLevel","synthetic":true,"types":[]},{"text":"impl Send for Error","synthetic":true,"types":[]}];
implementors["slog_json"] = [{"text":"impl&lt;W&gt; Send for Json&lt;W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;W: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;W&gt; Send for JsonBuilder&lt;W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;W: Send,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["slog_scope"] = [{"text":"impl Send for GlobalLoggerGuard","synthetic":true,"types":[]}];
implementors["slog_stdlog"] = [{"text":"impl Send for StdLog","synthetic":true,"types":[]}];
implementors["snow"] = [{"text":"impl&lt;'builder&gt; Send for Builder&lt;'builder&gt;","synthetic":true,"types":[]},{"text":"impl Send for Keypair","synthetic":true,"types":[]},{"text":"impl Send for HandshakeState","synthetic":true,"types":[]},{"text":"impl Send for StatelessTransportState","synthetic":true,"types":[]},{"text":"impl Send for TransportState","synthetic":true,"types":[]},{"text":"impl Send for Error","synthetic":true,"types":[]},{"text":"impl Send for PatternProblem","synthetic":true,"types":[]},{"text":"impl Send for InitStage","synthetic":true,"types":[]},{"text":"impl Send for Prerequisite","synthetic":true,"types":[]},{"text":"impl Send for StateProblem","synthetic":true,"types":[]},{"text":"impl Send for HandshakeChoice","synthetic":true,"types":[]},{"text":"impl Send for NoiseParams","synthetic":true,"types":[]},{"text":"impl Send for HandshakeModifier","synthetic":true,"types":[]},{"text":"impl Send for HandshakePattern","synthetic":true,"types":[]},{"text":"impl Send for BaseChoice","synthetic":true,"types":[]},{"text":"impl Send for DHChoice","synthetic":true,"types":[]},{"text":"impl Send for CipherChoice","synthetic":true,"types":[]},{"text":"impl Send for HashChoice","synthetic":true,"types":[]},{"text":"impl Send for DefaultResolver","synthetic":true,"types":[]},{"text":"impl Send for RingResolver","synthetic":true,"types":[]},{"text":"impl Send for FallbackResolver","synthetic":true,"types":[]}];
implementors["sp800_185"] = [{"text":"impl Send for CShake","synthetic":true,"types":[]},{"text":"impl Send for KMac","synthetic":true,"types":[]},{"text":"impl Send for TupleHash","synthetic":true,"types":[]}];
implementors["spin"] = [{"text":"impl&lt;'a, T:&nbsp;?Sized&gt; Send for MutexGuard&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; !Send for RwLockReadGuard&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; !Send for RwLockWriteGuard&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; !Send for RwLockUpgradeableGuard&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T:&nbsp;?Sized + Send&gt; Send for Mutex&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;?Sized + Send&gt; Send for RwLock&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Send&gt; Send for Once&lt;T&gt;","synthetic":false,"types":[]}];
implementors["stream_cipher"] = [{"text":"impl Send for InvalidKeyNonceLength","synthetic":true,"types":[]},{"text":"impl Send for LoopError","synthetic":true,"types":[]},{"text":"impl Send for OverflowError","synthetic":true,"types":[]}];
implementors["strsim"] = [{"text":"impl Send for StrSimError","synthetic":true,"types":[]}];
implementors["subtle"] = [{"text":"impl Send for Choice","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for CtOption&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["syn"] = [{"text":"impl !Send for Attribute","synthetic":true,"types":[]},{"text":"impl !Send for MetaList","synthetic":true,"types":[]},{"text":"impl !Send for MetaNameValue","synthetic":true,"types":[]},{"text":"impl !Send for Field","synthetic":true,"types":[]},{"text":"impl !Send for FieldsNamed","synthetic":true,"types":[]},{"text":"impl !Send for FieldsUnnamed","synthetic":true,"types":[]},{"text":"impl !Send for Variant","synthetic":true,"types":[]},{"text":"impl !Send for VisCrate","synthetic":true,"types":[]},{"text":"impl !Send for VisPublic","synthetic":true,"types":[]},{"text":"impl !Send for VisRestricted","synthetic":true,"types":[]},{"text":"impl !Send for Arm","synthetic":true,"types":[]},{"text":"impl !Send for FieldValue","synthetic":true,"types":[]},{"text":"impl !Send for Label","synthetic":true,"types":[]},{"text":"impl !Send for MethodTurbofish","synthetic":true,"types":[]},{"text":"impl !Send for ExprArray","synthetic":true,"types":[]},{"text":"impl !Send for ExprAssign","synthetic":true,"types":[]},{"text":"impl !Send for ExprAssignOp","synthetic":true,"types":[]},{"text":"impl !Send for ExprAsync","synthetic":true,"types":[]},{"text":"impl !Send for ExprAwait","synthetic":true,"types":[]},{"text":"impl !Send for ExprBinary","synthetic":true,"types":[]},{"text":"impl !Send for ExprBlock","synthetic":true,"types":[]},{"text":"impl !Send for ExprBox","synthetic":true,"types":[]},{"text":"impl !Send for ExprBreak","synthetic":true,"types":[]},{"text":"impl !Send for ExprCall","synthetic":true,"types":[]},{"text":"impl !Send for ExprCast","synthetic":true,"types":[]},{"text":"impl !Send for ExprClosure","synthetic":true,"types":[]},{"text":"impl !Send for ExprContinue","synthetic":true,"types":[]},{"text":"impl !Send for ExprField","synthetic":true,"types":[]},{"text":"impl !Send for ExprForLoop","synthetic":true,"types":[]},{"text":"impl !Send for ExprGroup","synthetic":true,"types":[]},{"text":"impl !Send for ExprIf","synthetic":true,"types":[]},{"text":"impl !Send for ExprIndex","synthetic":true,"types":[]},{"text":"impl !Send for ExprLet","synthetic":true,"types":[]},{"text":"impl !Send for ExprLit","synthetic":true,"types":[]},{"text":"impl !Send for ExprLoop","synthetic":true,"types":[]},{"text":"impl !Send for ExprMacro","synthetic":true,"types":[]},{"text":"impl !Send for ExprMatch","synthetic":true,"types":[]},{"text":"impl !Send for ExprMethodCall","synthetic":true,"types":[]},{"text":"impl !Send for ExprParen","synthetic":true,"types":[]},{"text":"impl !Send for ExprPath","synthetic":true,"types":[]},{"text":"impl !Send for ExprRange","synthetic":true,"types":[]},{"text":"impl !Send for ExprReference","synthetic":true,"types":[]},{"text":"impl !Send for ExprRepeat","synthetic":true,"types":[]},{"text":"impl !Send for ExprReturn","synthetic":true,"types":[]},{"text":"impl !Send for ExprStruct","synthetic":true,"types":[]},{"text":"impl !Send for ExprTry","synthetic":true,"types":[]},{"text":"impl !Send for ExprTryBlock","synthetic":true,"types":[]},{"text":"impl !Send for ExprTuple","synthetic":true,"types":[]},{"text":"impl !Send for ExprType","synthetic":true,"types":[]},{"text":"impl !Send for ExprUnary","synthetic":true,"types":[]},{"text":"impl !Send for ExprUnsafe","synthetic":true,"types":[]},{"text":"impl !Send for ExprWhile","synthetic":true,"types":[]},{"text":"impl !Send for ExprYield","synthetic":true,"types":[]},{"text":"impl !Send for Index","synthetic":true,"types":[]},{"text":"impl !Send for BoundLifetimes","synthetic":true,"types":[]},{"text":"impl !Send for ConstParam","synthetic":true,"types":[]},{"text":"impl !Send for Generics","synthetic":true,"types":[]},{"text":"impl !Send for LifetimeDef","synthetic":true,"types":[]},{"text":"impl !Send for PredicateEq","synthetic":true,"types":[]},{"text":"impl !Send for PredicateLifetime","synthetic":true,"types":[]},{"text":"impl !Send for PredicateType","synthetic":true,"types":[]},{"text":"impl !Send for TraitBound","synthetic":true,"types":[]},{"text":"impl !Send for TypeParam","synthetic":true,"types":[]},{"text":"impl !Send for WhereClause","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !Send for ImplGenerics&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !Send for Turbofish&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !Send for TypeGenerics&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl !Send for ForeignItemFn","synthetic":true,"types":[]},{"text":"impl !Send for ForeignItemMacro","synthetic":true,"types":[]},{"text":"impl !Send for ForeignItemStatic","synthetic":true,"types":[]},{"text":"impl !Send for ForeignItemType","synthetic":true,"types":[]},{"text":"impl !Send for ImplItemConst","synthetic":true,"types":[]},{"text":"impl !Send for ImplItemMacro","synthetic":true,"types":[]},{"text":"impl !Send for ImplItemMethod","synthetic":true,"types":[]},{"text":"impl !Send for ImplItemType","synthetic":true,"types":[]},{"text":"impl !Send for ItemConst","synthetic":true,"types":[]},{"text":"impl !Send for ItemEnum","synthetic":true,"types":[]},{"text":"impl !Send for ItemExternCrate","synthetic":true,"types":[]},{"text":"impl !Send for ItemFn","synthetic":true,"types":[]},{"text":"impl !Send for ItemForeignMod","synthetic":true,"types":[]},{"text":"impl !Send for ItemImpl","synthetic":true,"types":[]},{"text":"impl !Send for ItemMacro","synthetic":true,"types":[]},{"text":"impl !Send for ItemMacro2","synthetic":true,"types":[]},{"text":"impl !Send for ItemMod","synthetic":true,"types":[]},{"text":"impl !Send for ItemStatic","synthetic":true,"types":[]},{"text":"impl !Send for ItemStruct","synthetic":true,"types":[]},{"text":"impl !Send for ItemTrait","synthetic":true,"types":[]},{"text":"impl !Send for ItemTraitAlias","synthetic":true,"types":[]},{"text":"impl !Send for ItemType","synthetic":true,"types":[]},{"text":"impl !Send for ItemUnion","synthetic":true,"types":[]},{"text":"impl !Send for ItemUse","synthetic":true,"types":[]},{"text":"impl !Send for Receiver","synthetic":true,"types":[]},{"text":"impl !Send for Signature","synthetic":true,"types":[]},{"text":"impl !Send for TraitItemConst","synthetic":true,"types":[]},{"text":"impl !Send for TraitItemMacro","synthetic":true,"types":[]},{"text":"impl !Send for TraitItemMethod","synthetic":true,"types":[]},{"text":"impl !Send for TraitItemType","synthetic":true,"types":[]},{"text":"impl !Send for UseGlob","synthetic":true,"types":[]},{"text":"impl !Send for UseGroup","synthetic":true,"types":[]},{"text":"impl !Send for UseName","synthetic":true,"types":[]},{"text":"impl !Send for UsePath","synthetic":true,"types":[]},{"text":"impl !Send for UseRename","synthetic":true,"types":[]},{"text":"impl !Send for File","synthetic":true,"types":[]},{"text":"impl !Send for Lifetime","synthetic":true,"types":[]},{"text":"impl !Send for LitBool","synthetic":true,"types":[]},{"text":"impl !Send for LitByte","synthetic":true,"types":[]},{"text":"impl !Send for LitByteStr","synthetic":true,"types":[]},{"text":"impl !Send for LitChar","synthetic":true,"types":[]},{"text":"impl !Send for LitFloat","synthetic":true,"types":[]},{"text":"impl !Send for LitInt","synthetic":true,"types":[]},{"text":"impl !Send for LitStr","synthetic":true,"types":[]},{"text":"impl !Send for Macro","synthetic":true,"types":[]},{"text":"impl !Send for DataEnum","synthetic":true,"types":[]},{"text":"impl !Send for DataStruct","synthetic":true,"types":[]},{"text":"impl !Send for DataUnion","synthetic":true,"types":[]},{"text":"impl !Send for DeriveInput","synthetic":true,"types":[]},{"text":"impl !Send for Block","synthetic":true,"types":[]},{"text":"impl !Send for Local","synthetic":true,"types":[]},{"text":"impl !Send for Abi","synthetic":true,"types":[]},{"text":"impl !Send for BareFnArg","synthetic":true,"types":[]},{"text":"impl !Send for TypeArray","synthetic":true,"types":[]},{"text":"impl !Send for TypeBareFn","synthetic":true,"types":[]},{"text":"impl !Send for TypeGroup","synthetic":true,"types":[]},{"text":"impl !Send for TypeImplTrait","synthetic":true,"types":[]},{"text":"impl !Send for TypeInfer","synthetic":true,"types":[]},{"text":"impl !Send for TypeMacro","synthetic":true,"types":[]},{"text":"impl !Send for TypeNever","synthetic":true,"types":[]},{"text":"impl !Send for TypeParen","synthetic":true,"types":[]},{"text":"impl !Send for TypePath","synthetic":true,"types":[]},{"text":"impl !Send for TypePtr","synthetic":true,"types":[]},{"text":"impl !Send for TypeReference","synthetic":true,"types":[]},{"text":"impl !Send for TypeSlice","synthetic":true,"types":[]},{"text":"impl !Send for TypeTraitObject","synthetic":true,"types":[]},{"text":"impl !Send for TypeTuple","synthetic":true,"types":[]},{"text":"impl !Send for Variadic","synthetic":true,"types":[]},{"text":"impl !Send for FieldPat","synthetic":true,"types":[]},{"text":"impl !Send for PatBox","synthetic":true,"types":[]},{"text":"impl !Send for PatIdent","synthetic":true,"types":[]},{"text":"impl !Send for PatLit","synthetic":true,"types":[]},{"text":"impl !Send for PatMacro","synthetic":true,"types":[]},{"text":"impl !Send for PatOr","synthetic":true,"types":[]},{"text":"impl !Send for PatPath","synthetic":true,"types":[]},{"text":"impl !Send for PatRange","synthetic":true,"types":[]},{"text":"impl !Send for PatReference","synthetic":true,"types":[]},{"text":"impl !Send for PatRest","synthetic":true,"types":[]},{"text":"impl !Send for PatSlice","synthetic":true,"types":[]},{"text":"impl !Send for PatStruct","synthetic":true,"types":[]},{"text":"impl !Send for PatTuple","synthetic":true,"types":[]},{"text":"impl !Send for PatTupleStruct","synthetic":true,"types":[]},{"text":"impl !Send for PatType","synthetic":true,"types":[]},{"text":"impl !Send for PatWild","synthetic":true,"types":[]},{"text":"impl !Send for AngleBracketedGenericArguments","synthetic":true,"types":[]},{"text":"impl !Send for Binding","synthetic":true,"types":[]},{"text":"impl !Send for Constraint","synthetic":true,"types":[]},{"text":"impl !Send for ParenthesizedGenericArguments","synthetic":true,"types":[]},{"text":"impl !Send for Path","synthetic":true,"types":[]},{"text":"impl !Send for PathSegment","synthetic":true,"types":[]},{"text":"impl !Send for QSelf","synthetic":true,"types":[]},{"text":"impl Send for Error","synthetic":true,"types":[]},{"text":"impl !Send for AttrStyle","synthetic":true,"types":[]},{"text":"impl !Send for Meta","synthetic":true,"types":[]},{"text":"impl !Send for NestedMeta","synthetic":true,"types":[]},{"text":"impl !Send for Fields","synthetic":true,"types":[]},{"text":"impl !Send for Visibility","synthetic":true,"types":[]},{"text":"impl !Send for GenericMethodArgument","synthetic":true,"types":[]},{"text":"impl !Send for RangeLimits","synthetic":true,"types":[]},{"text":"impl !Send for Expr","synthetic":true,"types":[]},{"text":"impl !Send for Member","synthetic":true,"types":[]},{"text":"impl !Send for GenericParam","synthetic":true,"types":[]},{"text":"impl !Send for TraitBoundModifier","synthetic":true,"types":[]},{"text":"impl !Send for TypeParamBound","synthetic":true,"types":[]},{"text":"impl !Send for WherePredicate","synthetic":true,"types":[]},{"text":"impl !Send for FnArg","synthetic":true,"types":[]},{"text":"impl !Send for ForeignItem","synthetic":true,"types":[]},{"text":"impl !Send for ImplItem","synthetic":true,"types":[]},{"text":"impl !Send for Item","synthetic":true,"types":[]},{"text":"impl !Send for TraitItem","synthetic":true,"types":[]},{"text":"impl !Send for UseTree","synthetic":true,"types":[]},{"text":"impl !Send for Lit","synthetic":true,"types":[]},{"text":"impl Send for StrStyle","synthetic":true,"types":[]},{"text":"impl !Send for MacroDelimiter","synthetic":true,"types":[]},{"text":"impl !Send for Data","synthetic":true,"types":[]},{"text":"impl !Send for BinOp","synthetic":true,"types":[]},{"text":"impl !Send for UnOp","synthetic":true,"types":[]},{"text":"impl !Send for Stmt","synthetic":true,"types":[]},{"text":"impl !Send for ReturnType","synthetic":true,"types":[]},{"text":"impl !Send for Type","synthetic":true,"types":[]},{"text":"impl !Send for Pat","synthetic":true,"types":[]},{"text":"impl !Send for GenericArgument","synthetic":true,"types":[]},{"text":"impl !Send for PathArguments","synthetic":true,"types":[]},{"text":"impl !Send for Underscore","synthetic":true,"types":[]},{"text":"impl !Send for Abstract","synthetic":true,"types":[]},{"text":"impl !Send for As","synthetic":true,"types":[]},{"text":"impl !Send for Async","synthetic":true,"types":[]},{"text":"impl !Send for Auto","synthetic":true,"types":[]},{"text":"impl !Send for Await","synthetic":true,"types":[]},{"text":"impl !Send for Become","synthetic":true,"types":[]},{"text":"impl !Send for Box","synthetic":true,"types":[]},{"text":"impl !Send for Break","synthetic":true,"types":[]},{"text":"impl !Send for Const","synthetic":true,"types":[]},{"text":"impl !Send for Continue","synthetic":true,"types":[]},{"text":"impl !Send for Crate","synthetic":true,"types":[]},{"text":"impl !Send for Default","synthetic":true,"types":[]},{"text":"impl !Send for Do","synthetic":true,"types":[]},{"text":"impl !Send for Dyn","synthetic":true,"types":[]},{"text":"impl !Send for Else","synthetic":true,"types":[]},{"text":"impl !Send for Enum","synthetic":true,"types":[]},{"text":"impl !Send for Extern","synthetic":true,"types":[]},{"text":"impl !Send for Final","synthetic":true,"types":[]},{"text":"impl !Send for Fn","synthetic":true,"types":[]},{"text":"impl !Send for For","synthetic":true,"types":[]},{"text":"impl !Send for If","synthetic":true,"types":[]},{"text":"impl !Send for Impl","synthetic":true,"types":[]},{"text":"impl !Send for In","synthetic":true,"types":[]},{"text":"impl !Send for Let","synthetic":true,"types":[]},{"text":"impl !Send for Loop","synthetic":true,"types":[]},{"text":"impl !Send for Macro","synthetic":true,"types":[]},{"text":"impl !Send for Match","synthetic":true,"types":[]},{"text":"impl !Send for Mod","synthetic":true,"types":[]},{"text":"impl !Send for Move","synthetic":true,"types":[]},{"text":"impl !Send for Mut","synthetic":true,"types":[]},{"text":"impl !Send for Override","synthetic":true,"types":[]},{"text":"impl !Send for Priv","synthetic":true,"types":[]},{"text":"impl !Send for Pub","synthetic":true,"types":[]},{"text":"impl !Send for Ref","synthetic":true,"types":[]},{"text":"impl !Send for Return","synthetic":true,"types":[]},{"text":"impl !Send for SelfType","synthetic":true,"types":[]},{"text":"impl !Send for SelfValue","synthetic":true,"types":[]},{"text":"impl !Send for Static","synthetic":true,"types":[]},{"text":"impl !Send for Struct","synthetic":true,"types":[]},{"text":"impl !Send for Super","synthetic":true,"types":[]},{"text":"impl !Send for Trait","synthetic":true,"types":[]},{"text":"impl !Send for Try","synthetic":true,"types":[]},{"text":"impl !Send for Type","synthetic":true,"types":[]},{"text":"impl !Send for Typeof","synthetic":true,"types":[]},{"text":"impl !Send for Union","synthetic":true,"types":[]},{"text":"impl !Send for Unsafe","synthetic":true,"types":[]},{"text":"impl !Send for Unsized","synthetic":true,"types":[]},{"text":"impl !Send for Use","synthetic":true,"types":[]},{"text":"impl !Send for Virtual","synthetic":true,"types":[]},{"text":"impl !Send for Where","synthetic":true,"types":[]},{"text":"impl !Send for While","synthetic":true,"types":[]},{"text":"impl !Send for Yield","synthetic":true,"types":[]},{"text":"impl !Send for Add","synthetic":true,"types":[]},{"text":"impl !Send for AddEq","synthetic":true,"types":[]},{"text":"impl !Send for And","synthetic":true,"types":[]},{"text":"impl !Send for AndAnd","synthetic":true,"types":[]},{"text":"impl !Send for AndEq","synthetic":true,"types":[]},{"text":"impl !Send for At","synthetic":true,"types":[]},{"text":"impl !Send for Bang","synthetic":true,"types":[]},{"text":"impl !Send for Caret","synthetic":true,"types":[]},{"text":"impl !Send for CaretEq","synthetic":true,"types":[]},{"text":"impl !Send for Colon","synthetic":true,"types":[]},{"text":"impl !Send for Colon2","synthetic":true,"types":[]},{"text":"impl !Send for Comma","synthetic":true,"types":[]},{"text":"impl !Send for Div","synthetic":true,"types":[]},{"text":"impl !Send for DivEq","synthetic":true,"types":[]},{"text":"impl !Send for Dollar","synthetic":true,"types":[]},{"text":"impl !Send for Dot","synthetic":true,"types":[]},{"text":"impl !Send for Dot2","synthetic":true,"types":[]},{"text":"impl !Send for Dot3","synthetic":true,"types":[]},{"text":"impl !Send for DotDotEq","synthetic":true,"types":[]},{"text":"impl !Send for Eq","synthetic":true,"types":[]},{"text":"impl !Send for EqEq","synthetic":true,"types":[]},{"text":"impl !Send for Ge","synthetic":true,"types":[]},{"text":"impl !Send for Gt","synthetic":true,"types":[]},{"text":"impl !Send for Le","synthetic":true,"types":[]},{"text":"impl !Send for Lt","synthetic":true,"types":[]},{"text":"impl !Send for MulEq","synthetic":true,"types":[]},{"text":"impl !Send for Ne","synthetic":true,"types":[]},{"text":"impl !Send for Or","synthetic":true,"types":[]},{"text":"impl !Send for OrEq","synthetic":true,"types":[]},{"text":"impl !Send for OrOr","synthetic":true,"types":[]},{"text":"impl !Send for Pound","synthetic":true,"types":[]},{"text":"impl !Send for Question","synthetic":true,"types":[]},{"text":"impl !Send for RArrow","synthetic":true,"types":[]},{"text":"impl !Send for LArrow","synthetic":true,"types":[]},{"text":"impl !Send for Rem","synthetic":true,"types":[]},{"text":"impl !Send for RemEq","synthetic":true,"types":[]},{"text":"impl !Send for FatArrow","synthetic":true,"types":[]},{"text":"impl !Send for Semi","synthetic":true,"types":[]},{"text":"impl !Send for Shl","synthetic":true,"types":[]},{"text":"impl !Send for ShlEq","synthetic":true,"types":[]},{"text":"impl !Send for Shr","synthetic":true,"types":[]},{"text":"impl !Send for ShrEq","synthetic":true,"types":[]},{"text":"impl !Send for Star","synthetic":true,"types":[]},{"text":"impl !Send for Sub","synthetic":true,"types":[]},{"text":"impl !Send for SubEq","synthetic":true,"types":[]},{"text":"impl !Send for Tilde","synthetic":true,"types":[]},{"text":"impl !Send for Brace","synthetic":true,"types":[]},{"text":"impl !Send for Bracket","synthetic":true,"types":[]},{"text":"impl !Send for Paren","synthetic":true,"types":[]},{"text":"impl !Send for Group","synthetic":true,"types":[]},{"text":"impl !Send for TokenBuffer","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !Send for Cursor&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T, P&gt; Send for Punctuated&lt;T, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T, P&gt; Send for Pairs&lt;'a, T, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T, P&gt; Send for PairsMut&lt;'a, T, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, P&gt; Send for IntoPairs&lt;T, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for IntoIter&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; !Send for Iter&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; !Send for IterMut&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T, P&gt; Send for Pair&lt;T, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !Send for Lookahead1&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !Send for ParseBuffer&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'c, 'a&gt; !Send for StepCursor&lt;'c, 'a&gt;","synthetic":true,"types":[]},{"text":"impl Send for Nothing","synthetic":true,"types":[]}];
implementors["synstructure"] = [{"text":"impl&lt;'a&gt; !Send for BindingInfo&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !Send for VariantAst&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !Send for VariantInfo&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !Send for Structure&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Send for AddBounds","synthetic":true,"types":[]},{"text":"impl Send for BindStyle","synthetic":true,"types":[]}];
implementors["test_runtime_simple_keyvalue"] = [{"text":"impl Send for Runtime","synthetic":true,"types":[]},{"text":"impl Send for Parameters","synthetic":true,"types":[]},{"text":"impl Send for Genesis","synthetic":true,"types":[]},{"text":"impl Send for Module","synthetic":true,"types":[]},{"text":"impl Send for Error","synthetic":true,"types":[]},{"text":"impl Send for Event","synthetic":true,"types":[]},{"text":"impl Send for Key","synthetic":true,"types":[]},{"text":"impl Send for KeyValue","synthetic":true,"types":[]}];
implementors["time"] = [{"text":"impl Send for Duration","synthetic":true,"types":[]},{"text":"impl Send for OutOfRangeError","synthetic":true,"types":[]},{"text":"impl Send for Timespec","synthetic":true,"types":[]},{"text":"impl Send for PreciseTime","synthetic":true,"types":[]},{"text":"impl Send for SteadyTime","synthetic":true,"types":[]},{"text":"impl Send for Tm","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for TmFmt&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Send for ParseError","synthetic":true,"types":[]}];
implementors["tiny_keccak"] = [{"text":"impl Send for Sha3","synthetic":true,"types":[]}];
implementors["tokio_current_thread"] = [{"text":"impl&lt;P&nbsp;=&nbsp;ParkThread&gt; !Send for CurrentThread&lt;P&gt;","synthetic":true,"types":[]},{"text":"impl !Send for TaskExecutor","synthetic":true,"types":[]},{"text":"impl Send for Turn","synthetic":true,"types":[]},{"text":"impl&lt;'a, P&gt; !Send for Entered&lt;'a, P&gt;","synthetic":true,"types":[]},{"text":"impl Send for RunError","synthetic":true,"types":[]},{"text":"impl Send for RunTimeoutError","synthetic":true,"types":[]},{"text":"impl Send for TurnError","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for BlockError&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for Handle","synthetic":true,"types":[]}];
implementors["tokio_executor"] = [{"text":"impl !Send for Enter","synthetic":true,"types":[]},{"text":"impl Send for EnterError","synthetic":true,"types":[]},{"text":"impl Send for SpawnError","synthetic":true,"types":[]},{"text":"impl Send for DefaultExecutor","synthetic":true,"types":[]},{"text":"impl Send for DefaultGuard","synthetic":true,"types":[]},{"text":"impl !Send for ParkThread","synthetic":true,"types":[]},{"text":"impl Send for ParkError","synthetic":true,"types":[]},{"text":"impl Send for UnparkThread","synthetic":true,"types":[]}];
implementors["typenum"] = [{"text":"impl Send for Greater","synthetic":true,"types":[]},{"text":"impl Send for Less","synthetic":true,"types":[]},{"text":"impl Send for Equal","synthetic":true,"types":[]},{"text":"impl Send for B0","synthetic":true,"types":[]},{"text":"impl Send for B1","synthetic":true,"types":[]},{"text":"impl&lt;U&gt; Send for PInt&lt;U&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;U: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;U&gt; Send for NInt&lt;U&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;U: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for Z0","synthetic":true,"types":[]},{"text":"impl Send for UTerm","synthetic":true,"types":[]},{"text":"impl&lt;U, B&gt; Send for UInt&lt;U, B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;B: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;U: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for ATerm","synthetic":true,"types":[]},{"text":"impl&lt;V, A&gt; Send for TArr&lt;V, A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: Send,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["universal_hash"] = [{"text":"impl&lt;U&gt; Send for Output&lt;U&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;U as UniversalHash&gt;::BlockSize: ArrayLength&lt;u8&gt;,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for Error","synthetic":true,"types":[]}];
implementors["untrusted"] = [{"text":"impl&lt;'a&gt; Send for Input&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for Reader&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Send for Mark","synthetic":true,"types":[]},{"text":"impl Send for EndOfInput","synthetic":true,"types":[]}];
implementors["webpki"] = [{"text":"impl&lt;'a&gt; Send for DNSNameRef&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Send for InvalidDNSNameError","synthetic":true,"types":[]},{"text":"impl Send for DNSName","synthetic":true,"types":[]},{"text":"impl Send for SignatureAlgorithm","synthetic":true,"types":[]},{"text":"impl Send for Time","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for EndEntityCert&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for TrustAnchor&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for TLSServerTrustAnchors&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for TLSClientTrustAnchors&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Send for Error","synthetic":true,"types":[]}];
implementors["wyz"] = [{"text":"impl&lt;T&gt; Send for FmtBinary&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for FmtDisplay&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for FmtLowerExp&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for FmtLowerHex&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for FmtOctal&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for FmtPointer&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for FmtUpperExp&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for FmtUpperHex&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["x25519_dalek"] = [{"text":"impl Send for PublicKey","synthetic":true,"types":[]},{"text":"impl Send for EphemeralSecret","synthetic":true,"types":[]},{"text":"impl Send for StaticSecret","synthetic":true,"types":[]},{"text":"impl Send for SharedSecret","synthetic":true,"types":[]}];
implementors["zeroize"] = [{"text":"impl&lt;Z&gt; Send for Zeroizing&lt;Z&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Z: Send,&nbsp;</span>","synthetic":true,"types":[]}];
if (window.register_implementors) {window.register_implementors(implementors);} else {window.pending_implementors = implementors;}})()