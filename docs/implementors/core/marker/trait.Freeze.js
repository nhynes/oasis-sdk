(function() {var implementors = {};
implementors["aead"] = [{"text":"impl Freeze for Error","synthetic":true,"types":[]},{"text":"impl&lt;'msg, 'aad&gt; Freeze for Payload&lt;'msg, 'aad&gt;","synthetic":true,"types":[]}];
implementors["aes_gcm"] = [{"text":"impl&lt;Aes, NonceSize&gt; Freeze for AesGcm&lt;Aes, NonceSize&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Aes: Freeze,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["aesni"] = [{"text":"impl Freeze for Aes128","synthetic":true,"types":[]},{"text":"impl Freeze for Aes192","synthetic":true,"types":[]},{"text":"impl Freeze for Aes256","synthetic":true,"types":[]}];
implementors["anyhow"] = [{"text":"impl Freeze for Error","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for Chain&lt;'a&gt;","synthetic":true,"types":[]}];
implementors["arbitrary"] = [{"text":"impl&lt;'a&gt; Freeze for Unstructured&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for Error","synthetic":true,"types":[]},{"text":"impl&lt;'a, 'b, ElementType&gt; Freeze for ArbitraryIter&lt;'a, 'b, ElementType&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, ElementType&gt; Freeze for ArbitraryTakeRestIter&lt;'a, ElementType&gt;","synthetic":true,"types":[]}];
implementors["arc_swap"] = [{"text":"impl&lt;T, S&gt; Freeze for Guard&lt;T, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;S as InnerStrategy&lt;T&gt;&gt;::Protected: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, S&nbsp;=&nbsp;HybridStrategy&lt;DefaultConfig&gt;&gt; !Freeze for ArcSwapAny&lt;T, S&gt;","synthetic":true,"types":[]},{"text":"impl&lt;A, T, F&gt; Freeze for Map&lt;A, T, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for Constant&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A, T&gt; Freeze for Cache&lt;A, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A, T, F&gt; Freeze for MapCache&lt;A, T, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["base64"] = [{"text":"impl Freeze for Config","synthetic":true,"types":[]},{"text":"impl Freeze for DecodeError","synthetic":true,"types":[]},{"text":"impl Freeze for CharacterSet","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for Base64Display&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, R&gt; Freeze for DecoderReader&lt;'a, R&gt;","synthetic":true,"types":[]},{"text":"impl&lt;W&gt; Freeze for EncoderWriter&lt;W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;W: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; Freeze for EncoderStringWriter&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Freeze,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["bech32"] = [{"text":"impl Freeze for u5","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for Bech32Writer&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for Error","synthetic":true,"types":[]}];
implementors["bincode"] = [{"text":"impl Freeze for Config","synthetic":true,"types":[]},{"text":"impl&lt;W, O&gt; Freeze for Serializer&lt;W, O&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;O: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;W: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for ErrorKind","synthetic":true,"types":[]},{"text":"impl Freeze for BigEndian","synthetic":true,"types":[]},{"text":"impl Freeze for LittleEndian","synthetic":true,"types":[]},{"text":"impl Freeze for NativeEndian","synthetic":true,"types":[]},{"text":"impl Freeze for FixintEncoding","synthetic":true,"types":[]},{"text":"impl Freeze for VarintEncoding","synthetic":true,"types":[]},{"text":"impl Freeze for Bounded","synthetic":true,"types":[]},{"text":"impl Freeze for Infinite","synthetic":true,"types":[]},{"text":"impl Freeze for AllowTrailing","synthetic":true,"types":[]},{"text":"impl Freeze for RejectTrailing","synthetic":true,"types":[]},{"text":"impl Freeze for DefaultOptions","synthetic":true,"types":[]},{"text":"impl&lt;O, L&gt; Freeze for WithOtherLimit&lt;O, L&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;L: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;O: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;O, E&gt; Freeze for WithOtherEndian&lt;O, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;O: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;O, I&gt; Freeze for WithOtherIntEncoding&lt;O, I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;O: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;O, T&gt; Freeze for WithOtherTrailing&lt;O, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;O: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R, O&gt; Freeze for Deserializer&lt;R, O&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;O: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'storage&gt; Freeze for SliceReader&lt;'storage&gt;","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Freeze for IoReader&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Freeze,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["bitvec"] = [{"text":"impl&lt;O, V&gt; Freeze for BitArray&lt;O, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;V: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, O, T&gt; Freeze for BitDomain&lt;'a, O, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, O, T&gt; Freeze for BitDomainMut&lt;'a, O, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Freeze for Domain&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Freeze for DomainMut&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;M&gt; Freeze for BitIdx&lt;M&gt;","synthetic":true,"types":[]},{"text":"impl&lt;M&gt; Freeze for BitTail&lt;M&gt;","synthetic":true,"types":[]},{"text":"impl&lt;M&gt; Freeze for BitPos&lt;M&gt;","synthetic":true,"types":[]},{"text":"impl&lt;M&gt; Freeze for BitSel&lt;M&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;M: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;M&gt; Freeze for BitMask&lt;M&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;M: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for Msb0","synthetic":true,"types":[]},{"text":"impl Freeze for Lsb0","synthetic":true,"types":[]},{"text":"impl&lt;O, T&gt; Freeze for BitSlice&lt;O, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, O, T&gt; Freeze for Chunks&lt;'a, O, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, O, T&gt; Freeze for ChunksExact&lt;'a, O, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, O, T&gt; Freeze for ChunksExactMut&lt;'a, O, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, O, T&gt; Freeze for ChunksMut&lt;'a, O, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, O, T&gt; Freeze for Iter&lt;'a, O, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, O, T&gt; Freeze for IterMut&lt;'a, O, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as BitStore&gt;::Alias: BitStore,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, O, T&gt; Freeze for RChunks&lt;'a, O, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, O, T&gt; Freeze for RChunksExact&lt;'a, O, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, O, T&gt; Freeze for RChunksExactMut&lt;'a, O, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, O, T&gt; Freeze for RChunksMut&lt;'a, O, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, O, T, P&gt; Freeze for RSplit&lt;'a, O, T, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, O, T, P&gt; Freeze for RSplitMut&lt;'a, O, T, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, O, T, P&gt; Freeze for RSplitN&lt;'a, O, T, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, O, T, P&gt; Freeze for RSplitNMut&lt;'a, O, T, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, O, T, P&gt; Freeze for Split&lt;'a, O, T, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, O, T, P&gt; Freeze for SplitMut&lt;'a, O, T, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, O, T, P&gt; Freeze for SplitN&lt;'a, O, T, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, O, T, P&gt; Freeze for SplitNMut&lt;'a, O, T, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, O, T&gt; Freeze for Windows&lt;'a, O, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, O, T&gt; Freeze for BitMut&lt;'a, O, T&gt;","synthetic":true,"types":[]}];
implementors["blake2"] = [{"text":"impl Freeze for Blake2b","synthetic":true,"types":[]},{"text":"impl Freeze for VarBlake2b","synthetic":true,"types":[]},{"text":"impl Freeze for Blake2s","synthetic":true,"types":[]},{"text":"impl Freeze for VarBlake2s","synthetic":true,"types":[]}];
implementors["block_buffer"] = [{"text":"impl&lt;BlockSize&gt; Freeze for BlockBuffer&lt;BlockSize&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;BlockSize as ArrayLength&lt;u8&gt;&gt;::ArrayType: Freeze,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["block_cipher"] = [{"text":"impl Freeze for InvalidKeyLength","synthetic":true,"types":[]}];
implementors["byteorder"] = [{"text":"impl Freeze for BigEndian","synthetic":true,"types":[]},{"text":"impl Freeze for LittleEndian","synthetic":true,"types":[]}];
implementors["chacha20"] = [{"text":"impl&lt;R&gt; Freeze for Cipher&lt;R&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for XChaCha20","synthetic":true,"types":[]}];
implementors["chacha20poly1305"] = [{"text":"impl Freeze for XChaCha20Poly1305","synthetic":true,"types":[]},{"text":"impl&lt;C&gt; Freeze for ChaChaPoly1305&lt;C&gt;","synthetic":true,"types":[]}];
implementors["chrono"] = [{"text":"impl&lt;Tz&gt; Freeze for Date&lt;Tz&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Tz as TimeZone&gt;::Offset: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Tz&gt; Freeze for DateTime&lt;Tz&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Tz as TimeZone&gt;::Offset: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for ParseWeekdayError","synthetic":true,"types":[]},{"text":"impl Freeze for ParseMonthError","synthetic":true,"types":[]},{"text":"impl Freeze for SecondsFormat","synthetic":true,"types":[]},{"text":"impl Freeze for RoundingError","synthetic":true,"types":[]},{"text":"impl Freeze for Weekday","synthetic":true,"types":[]},{"text":"impl Freeze for Month","synthetic":true,"types":[]},{"text":"impl Freeze for FixedOffset","synthetic":true,"types":[]},{"text":"impl Freeze for Local","synthetic":true,"types":[]},{"text":"impl Freeze for Utc","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for LocalResult&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for NaiveDate","synthetic":true,"types":[]},{"text":"impl Freeze for NaiveDateTime","synthetic":true,"types":[]},{"text":"impl Freeze for IsoWeek","synthetic":true,"types":[]},{"text":"impl Freeze for NaiveTime","synthetic":true,"types":[]},{"text":"impl Freeze for Parsed","synthetic":true,"types":[]},{"text":"impl Freeze for InternalNumeric","synthetic":true,"types":[]},{"text":"impl Freeze for InternalFixed","synthetic":true,"types":[]},{"text":"impl Freeze for ParseError","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Freeze for DelayedFormat&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for Pad","synthetic":true,"types":[]},{"text":"impl Freeze for Numeric","synthetic":true,"types":[]},{"text":"impl Freeze for Fixed","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for Item&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for StrftimeItems&lt;'a&gt;","synthetic":true,"types":[]}];
implementors["const_oid"] = [{"text":"impl Freeze for Error","synthetic":true,"types":[]},{"text":"impl Freeze for ObjectIdentifier","synthetic":true,"types":[]}];
implementors["cpuid_bool"] = [{"text":"impl !Freeze for LazyBool","synthetic":true,"types":[]}];
implementors["crossbeam_channel"] = [{"text":"impl&lt;T&gt; Freeze for IntoIter&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Freeze for Iter&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Freeze for TryIter&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for Receiver&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for Sender&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for Select&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for SelectedOperation&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for ReadyTimeoutError","synthetic":true,"types":[]},{"text":"impl Freeze for SelectTimeoutError","synthetic":true,"types":[]},{"text":"impl Freeze for TryReadyError","synthetic":true,"types":[]},{"text":"impl Freeze for TrySelectError","synthetic":true,"types":[]},{"text":"impl Freeze for RecvError","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for SendError&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for RecvTimeoutError","synthetic":true,"types":[]},{"text":"impl Freeze for TryRecvError","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for SendTimeoutError&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for TrySendError&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["crossbeam_deque"] = [{"text":"impl&lt;T&gt; !Freeze for Injector&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for Stealer&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !Freeze for Worker&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for Steal&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["crossbeam_epoch"] = [{"text":"impl&lt;T&gt; !Freeze for Atomic&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'g, T:&nbsp;?Sized, P&gt; Freeze for CompareExchangeError&lt;'g, T, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T:&nbsp;?Sized&gt; Freeze for Owned&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'g, T:&nbsp;?Sized&gt; Freeze for Shared&lt;'g, T&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for Collector","synthetic":true,"types":[]},{"text":"impl Freeze for LocalHandle","synthetic":true,"types":[]},{"text":"impl Freeze for Guard","synthetic":true,"types":[]}];
implementors["crossbeam_queue"] = [{"text":"impl&lt;T&gt; !Freeze for ArrayQueue&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !Freeze for SegQueue&lt;T&gt;","synthetic":true,"types":[]}];
implementors["crossbeam_utils"] = [{"text":"impl&lt;T&gt; Freeze for CachePadded&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl !Freeze for Backoff","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !Freeze for AtomicCell&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for Parker","synthetic":true,"types":[]},{"text":"impl Freeze for Unparker","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !Freeze for ShardedLock&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T:&nbsp;?Sized&gt; Freeze for ShardedLockReadGuard&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T:&nbsp;?Sized&gt; Freeze for ShardedLockWriteGuard&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for WaitGroup","synthetic":true,"types":[]},{"text":"impl&lt;'env&gt; Freeze for Scope&lt;'env&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'scope, 'env&gt; Freeze for ScopedThreadBuilder&lt;'scope, 'env&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'scope, T&gt; Freeze for ScopedJoinHandle&lt;'scope, T&gt;","synthetic":true,"types":[]}];
implementors["crypto_mac"] = [{"text":"impl Freeze for InvalidKeyLength","synthetic":true,"types":[]},{"text":"impl Freeze for MacError","synthetic":true,"types":[]},{"text":"impl&lt;M&gt; Freeze for Output&lt;M&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt;M as Mac&gt;::OutputSize as ArrayLength&lt;u8&gt;&gt;::ArrayType: Freeze,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["curve25519_dalek"] = [{"text":"impl Freeze for Scalar","synthetic":true,"types":[]},{"text":"impl Freeze for MontgomeryPoint","synthetic":true,"types":[]},{"text":"impl Freeze for CompressedEdwardsY","synthetic":true,"types":[]},{"text":"impl Freeze for EdwardsPoint","synthetic":true,"types":[]},{"text":"impl Freeze for VartimeEdwardsPrecomputation","synthetic":true,"types":[]},{"text":"impl Freeze for EdwardsBasepointTable","synthetic":true,"types":[]},{"text":"impl Freeze for CompressedRistretto","synthetic":true,"types":[]},{"text":"impl Freeze for RistrettoPoint","synthetic":true,"types":[]},{"text":"impl Freeze for VartimeRistrettoPrecomputation","synthetic":true,"types":[]},{"text":"impl Freeze for RistrettoBasepointTable","synthetic":true,"types":[]}];
implementors["darling_core"] = [{"text":"impl&lt;T&gt; Freeze for Fields&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;P, W&gt; Freeze for Generics&lt;P, W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;W: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;V, F&gt; Freeze for Data&lt;V, F&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for Style","synthetic":true,"types":[]},{"text":"impl&lt;T, L, C&gt; Freeze for GenericParam&lt;T, L, C&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;C: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;L: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for Error","synthetic":true,"types":[]},{"text":"impl Freeze for IntoIter","synthetic":true,"types":[]},{"text":"impl Freeze for Options","synthetic":true,"types":[]},{"text":"impl Freeze for Purpose","synthetic":true,"types":[]},{"text":"impl Freeze for IdentString","synthetic":true,"types":[]},{"text":"impl Freeze for Ignored","synthetic":true,"types":[]},{"text":"impl Freeze for PathList","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for SpannedValue&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, O&gt; Freeze for WithOriginal&lt;T, O&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;O: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for Flag","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for Override&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["deoxysii"] = [{"text":"impl Freeze for DeoxysII","synthetic":true,"types":[]},{"text":"impl Freeze for DecryptionError","synthetic":true,"types":[]}];
implementors["digest"] = [{"text":"impl Freeze for InvalidOutputSize","synthetic":true,"types":[]}];
implementors["ecdsa"] = [{"text":"impl&lt;C&gt; Freeze for Signature&lt;C&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt;&lt;C as Curve&gt;::FieldSize as Add&lt;&lt;C as Curve&gt;::FieldSize&gt;&gt;::Output as ArrayLength&lt;u8&gt;&gt;::ArrayType: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;C as Curve&gt;::FieldSize: Add&lt;&lt;C as Curve&gt;::FieldSize&gt;,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;C&gt; Freeze for Signature&lt;C&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt;&lt;&lt;C as Curve&gt;::FieldSize as Add&lt;&lt;C as Curve&gt;::FieldSize&gt;&gt;::Output as Add&lt;UInt&lt;UInt&lt;UInt&lt;UInt&lt;UTerm, B1&gt;, B0&gt;, B0&gt;, B1&gt;&gt;&gt;::Output as ArrayLength&lt;u8&gt;&gt;::ArrayType: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;C&gt; Freeze for SigningKey&lt;C&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;C as ProjectiveArithmetic&gt;::ProjectivePoint: Group,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt;C as ProjectiveArithmetic&gt;::ProjectivePoint as Group&gt;::Scalar: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;C&gt; Freeze for VerifyingKey&lt;C&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt;C as ProjectiveArithmetic&gt;::ProjectivePoint as Curve&gt;::AffineRepr: Freeze,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["ed25519"] = [{"text":"impl Freeze for Signature","synthetic":true,"types":[]}];
implementors["ed25519_dalek"] = [{"text":"impl Freeze for Keypair","synthetic":true,"types":[]},{"text":"impl Freeze for PublicKey","synthetic":true,"types":[]},{"text":"impl Freeze for SecretKey","synthetic":true,"types":[]},{"text":"impl Freeze for ExpandedSecretKey","synthetic":true,"types":[]}];
implementors["elliptic_curve"] = [{"text":"impl Freeze for Error","synthetic":true,"types":[]},{"text":"impl&lt;C&gt; Freeze for EncodedPoint&lt;C&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt;&lt;&lt;C as Curve&gt;::FieldSize as Add&lt;&lt;C as Curve&gt;::FieldSize&gt;&gt;::Output as Add&lt;UInt&lt;UTerm, B1&gt;&gt;&gt;::Output as ArrayLength&lt;u8&gt;&gt;::ArrayType: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;C as Curve&gt;::FieldSize: Add&lt;&lt;C as Curve&gt;::FieldSize&gt;,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, C&gt; Freeze for Coordinates&lt;'a, C&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for Tag","synthetic":true,"types":[]},{"text":"impl&lt;C&gt; Freeze for PublicKey&lt;C&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt;C as ProjectiveArithmetic&gt;::ProjectivePoint as Curve&gt;::AffineRepr: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;C&gt; Freeze for NonZeroScalar&lt;C&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt;C as ProjectiveArithmetic&gt;::ProjectivePoint as Group&gt;::Scalar: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;C&gt; Freeze for SecretKey&lt;C&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;C as SecretValue&gt;::Secret: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;C&gt; Freeze for SecretBytes&lt;C&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt;C as Curve&gt;::FieldSize as ArrayLength&lt;u8&gt;&gt;::ArrayType: Freeze,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["fnv"] = [{"text":"impl Freeze for FnvHasher","synthetic":true,"types":[]}];
implementors["futures"] = [{"text":"impl&lt;T&gt; Freeze for Async&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for AsyncSink&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, E&gt; Freeze for Empty&lt;T, E&gt;","synthetic":true,"types":[]},{"text":"impl&lt;F, R&gt; Freeze for Lazy&lt;F, R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;R as IntoFuture&gt;::Future: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;F&gt; Freeze for PollFn&lt;F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, E&gt; Freeze for FutureResult&lt;T, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A, F&gt; Freeze for LoopFn&lt;A, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;A as IntoFuture&gt;::Future: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A, B, F&gt; Freeze for AndThen&lt;A, B, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as IntoFuture&gt;::Future: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A&gt; Freeze for Flatten&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt;A as Future&gt;::Item as IntoFuture&gt;::Future: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;F&gt; Freeze for FlattenStream&lt;F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;F as Future&gt;::Item: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A&gt; Freeze for Fuse&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;F&gt; Freeze for IntoStream&lt;F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A, B&gt; Freeze for Join&lt;A, B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;B: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;A as Future&gt;::Item: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Future&gt;::Item: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A, B, C&gt; Freeze for Join3&lt;A, B, C&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;B: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;C: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;A as Future&gt;::Item: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Future&gt;::Item: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;C as Future&gt;::Item: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A, B, C, D&gt; Freeze for Join4&lt;A, B, C, D&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;B: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;C: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;D: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;A as Future&gt;::Item: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Future&gt;::Item: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;C as Future&gt;::Item: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;D as Future&gt;::Item: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A, B, C, D, E&gt; Freeze for Join5&lt;A, B, C, D, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;B: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;C: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;D: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;A as Future&gt;::Item: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Future&gt;::Item: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;C as Future&gt;::Item: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;D as Future&gt;::Item: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;E as Future&gt;::Item: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A, F&gt; Freeze for Map&lt;A, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A, F&gt; Freeze for MapErr&lt;A, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A, E&gt; Freeze for FromErr&lt;A, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A, B, F&gt; Freeze for OrElse&lt;A, B, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as IntoFuture&gt;::Future: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A, B&gt; Freeze for Select&lt;A, B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;B: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A, B&gt; Freeze for SelectNext&lt;A, B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;B: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A, B&gt; Freeze for Select2&lt;A, B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;B: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A, B, F&gt; Freeze for Then&lt;A, B, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as IntoFuture&gt;::Future: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A, F&gt; Freeze for Inspect&lt;A, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;F&gt; Freeze for CatchUnwind&lt;F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Freeze for JoinAll&lt;I&gt;","synthetic":true,"types":[]},{"text":"impl&lt;A&gt; Freeze for SelectAll&lt;A&gt;","synthetic":true,"types":[]},{"text":"impl&lt;A&gt; Freeze for SelectOk&lt;A&gt;","synthetic":true,"types":[]},{"text":"impl&lt;F&gt; Freeze for Shared&lt;F&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for SharedItem&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Freeze for SharedError&lt;E&gt;","synthetic":true,"types":[]},{"text":"impl&lt;F&gt; Freeze for ExecuteError&lt;F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, S&gt; Freeze for Loop&lt;T, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A, B&gt; Freeze for Either&lt;A, B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;B: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for ExecuteErrorKind","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Freeze for Iter&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, E&gt; Freeze for IterOk&lt;I, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Freeze for IterResult&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, E&gt; Freeze for Repeat&lt;T, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S, F, U&gt; Freeze for AndThen&lt;S, F, U&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;U as IntoFuture&gt;::Future: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S1, S2&gt; Freeze for Chain&lt;S1, S2&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S1: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;S2: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; Freeze for Concat&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;S as Stream&gt;::Item: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; Freeze for Concat2&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;S as Stream&gt;::Item: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, E&gt; Freeze for Empty&lt;T, E&gt;","synthetic":true,"types":[]},{"text":"impl&lt;S, F&gt; Freeze for Filter&lt;S, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S, F&gt; Freeze for FilterMap&lt;S, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; Freeze for Flatten&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;S as Stream&gt;::Item: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S, F, Fut, T&gt; Freeze for Fold&lt;S, F, Fut, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut as IntoFuture&gt;::Future: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S, F, U&gt; Freeze for ForEach&lt;S, F, U&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;U as IntoFuture&gt;::Future: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S, E&gt; Freeze for FromErr&lt;S, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; Freeze for Fuse&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; Freeze for StreamFuture&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S, F&gt; Freeze for Inspect&lt;S, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S, F&gt; Freeze for InspectErr&lt;S, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S, F&gt; Freeze for Map&lt;S, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S, F&gt; Freeze for MapErr&lt;S, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S1, S2&gt; Freeze for Merge&lt;S1, S2&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S1: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;S2: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;S2 as Stream&gt;::Error: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, E&gt; Freeze for Once&lt;T, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S, F, U&gt; Freeze for OrElse&lt;S, F, U&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;U as IntoFuture&gt;::Future: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; Freeze for Peekable&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;S as Stream&gt;::Item: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;F&gt; Freeze for PollFn&lt;F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S1, S2&gt; Freeze for Select&lt;S1, S2&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S1: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;S2: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; Freeze for Skip&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S, P, R&gt; Freeze for SkipWhile&lt;S, P, R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;R as IntoFuture&gt;::Future: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;S as Stream&gt;::Item: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; Freeze for Take&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S, P, R&gt; Freeze for TakeWhile&lt;S, P, R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;R as IntoFuture&gt;::Future: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;S as Stream&gt;::Item: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S, F, U&gt; Freeze for Then&lt;S, F, U&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;U as IntoFuture&gt;::Future: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, F, Fut&gt; Freeze for Unfold&lt;T, F, Fut&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut as IntoFuture&gt;::Future: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S1, S2&gt; Freeze for Zip&lt;S1, S2&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S1: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;S2: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;S1 as Stream&gt;::Item: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;S2 as Stream&gt;::Item: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, U&gt; Freeze for Forward&lt;T, U&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;U: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as Stream&gt;::Item: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; Freeze for Buffered&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; Freeze for BufferUnordered&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; Freeze for CatchUnwind&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; Freeze for Chunks&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;S as Stream&gt;::Error: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; Freeze for Collect&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; !Freeze for Wait&lt;S&gt;","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; Freeze for SplitStream&lt;S&gt;","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; Freeze for SplitSink&lt;S&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for ReuniteError&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for FuturesOrdered&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;I1, I2&gt; Freeze for MergedItem&lt;I1, I2&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I1: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;I2: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;F&gt; Freeze for FuturesUnordered&lt;F&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, F&gt; Freeze for IterMut&lt;'a, F&gt;","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; Freeze for Buffer&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; !Freeze for Wait&lt;S&gt;","synthetic":true,"types":[]},{"text":"impl&lt;S, U, F, Fut&gt; Freeze for With&lt;S, U, F, Fut&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut as IntoFuture&gt;::Future: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;S as Sink&gt;::SinkItem: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S, U, F, St&gt; Freeze for WithFlatMap&lt;S, U, F, St&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;St: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;S as Sink&gt;::SinkItem: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; Freeze for Flush&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; Freeze for Send&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;S as Sink&gt;::SinkItem: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, U&gt; Freeze for SendAll&lt;T, U&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;U: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;U as Stream&gt;::Item: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S, F&gt; Freeze for SinkMapErr&lt;S, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S, E&gt; Freeze for SinkFromErr&lt;S, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A, B&gt; Freeze for Fanout&lt;A, B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;B: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;A as Sink&gt;::SinkItem: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Sink&gt;::SinkItem: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for Task","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !Freeze for Spawn&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for NotifyHandle","synthetic":true,"types":[]},{"text":"impl !Freeze for AtomicTask","synthetic":true,"types":[]},{"text":"impl Freeze for UnparkEvent","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for LocalKey&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for BiLock&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Freeze for BiLockGuard&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for BiLockAcquire&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for BiLockAcquired&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for Receiver&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for Sender&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for Canceled","synthetic":true,"types":[]},{"text":"impl&lt;T, E&gt; Freeze for SpawnHandle&lt;T, E&gt;","synthetic":true,"types":[]},{"text":"impl&lt;F&gt; Freeze for Execute&lt;F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for Sender&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for UnboundedSender&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for Receiver&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for UnboundedReceiver&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for SendError&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for TrySendError&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Item, Error&gt; Freeze for SpawnHandle&lt;Item, Error&gt;","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; Freeze for Execute&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;S as Stream&gt;::Error: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;S as Stream&gt;::Item: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for Sender&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for Receiver&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for UnboundedSender&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for UnboundedReceiver&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for SendError&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Item, Error&gt; Freeze for SpawnHandle&lt;Item, Error&gt;","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; Freeze for Execute&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;S as Stream&gt;::Error: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;S as Stream&gt;::Item: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for Sender&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for Receiver&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, E&gt; Freeze for SpawnHandle&lt;T, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;F&gt; Freeze for Execute&lt;F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Freeze,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["generic_array"] = [{"text":"impl&lt;T, U&gt; Freeze for GenericArray&lt;T, U&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;U as ArrayLength&lt;T&gt;&gt;::ArrayType: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, N&gt; Freeze for GenericArrayIter&lt;T, N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;N as ArrayLength&lt;T&gt;&gt;::ArrayType: Freeze,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["getrandom"] = [{"text":"impl Freeze for Error","synthetic":true,"types":[]}];
implementors["ghash"] = [{"text":"impl Freeze for GHash","synthetic":true,"types":[]}];
implementors["half"] = [{"text":"impl Freeze for f16","synthetic":true,"types":[]},{"text":"impl Freeze for bf16","synthetic":true,"types":[]}];
implementors["hex"] = [{"text":"impl Freeze for FromHexError","synthetic":true,"types":[]}];
implementors["hmac"] = [{"text":"impl&lt;D&gt; Freeze for Hmac&lt;D&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;D: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt;D as BlockInput&gt;::BlockSize as ArrayLength&lt;u8&gt;&gt;::ArrayType: Freeze,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["ident_case"] = [{"text":"impl Freeze for RenameRule","synthetic":true,"types":[]}];
implementors["intrusive_collections"] = [{"text":"impl&lt;T:&nbsp;?Sized&gt; Freeze for UnsafeRef&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for Bound&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl !Freeze for Link","synthetic":true,"types":[]},{"text":"impl&lt;'a, A&gt; Freeze for Cursor&lt;'a, A&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, A&gt; Freeze for CursorMut&lt;'a, A&gt;","synthetic":true,"types":[]},{"text":"impl&lt;A&gt; Freeze for LinkedList&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, A&gt; Freeze for Iter&lt;'a, A&gt;","synthetic":true,"types":[]},{"text":"impl&lt;A&gt; Freeze for IntoIter&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl !Freeze for Link","synthetic":true,"types":[]},{"text":"impl&lt;'a, A&gt; Freeze for Cursor&lt;'a, A&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, A&gt; Freeze for CursorMut&lt;'a, A&gt;","synthetic":true,"types":[]},{"text":"impl&lt;A&gt; Freeze for RBTree&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, A&gt; Freeze for InsertCursor&lt;'a, A&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, A&gt; Freeze for Iter&lt;'a, A&gt;","synthetic":true,"types":[]},{"text":"impl&lt;A&gt; Freeze for IntoIter&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, A&gt; Freeze for Entry&lt;'a, A&gt;","synthetic":true,"types":[]},{"text":"impl !Freeze for Link","synthetic":true,"types":[]},{"text":"impl&lt;'a, A&gt; Freeze for Cursor&lt;'a, A&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, A&gt; Freeze for CursorMut&lt;'a, A&gt;","synthetic":true,"types":[]},{"text":"impl&lt;A&gt; Freeze for SinglyLinkedList&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, A&gt; Freeze for Iter&lt;'a, A&gt;","synthetic":true,"types":[]},{"text":"impl&lt;A&gt; Freeze for IntoIter&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl !Freeze for Link","synthetic":true,"types":[]},{"text":"impl&lt;'a, A&gt; Freeze for Cursor&lt;'a, A&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, A&gt; Freeze for CursorMut&lt;'a, A&gt;","synthetic":true,"types":[]},{"text":"impl&lt;A&gt; Freeze for XorLinkedList&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, A&gt; Freeze for Iter&lt;'a, A&gt;","synthetic":true,"types":[]},{"text":"impl&lt;A&gt; Freeze for IntoIter&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Freeze,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["io_context"] = [{"text":"impl Freeze for Context","synthetic":true,"types":[]},{"text":"impl Freeze for CancelSignal","synthetic":true,"types":[]},{"text":"impl Freeze for DoneReason","synthetic":true,"types":[]}];
implementors["itoa"] = [{"text":"impl Freeze for Buffer","synthetic":true,"types":[]}];
implementors["k256"] = [{"text":"impl Freeze for AffinePoint","synthetic":true,"types":[]},{"text":"impl Freeze for ProjectivePoint","synthetic":true,"types":[]},{"text":"impl Freeze for Scalar","synthetic":true,"types":[]},{"text":"impl Freeze for Secp256k1","synthetic":true,"types":[]},{"text":"impl Freeze for SigningKey","synthetic":true,"types":[]},{"text":"impl Freeze for VerifyingKey","synthetic":true,"types":[]},{"text":"impl Freeze for Signature","synthetic":true,"types":[]},{"text":"impl Freeze for Id","synthetic":true,"types":[]}];
implementors["libc"] = [{"text":"impl Freeze for group","synthetic":true,"types":[]},{"text":"impl Freeze for utimbuf","synthetic":true,"types":[]},{"text":"impl Freeze for timeval","synthetic":true,"types":[]},{"text":"impl Freeze for timespec","synthetic":true,"types":[]},{"text":"impl Freeze for rlimit","synthetic":true,"types":[]},{"text":"impl Freeze for rusage","synthetic":true,"types":[]},{"text":"impl Freeze for ipv6_mreq","synthetic":true,"types":[]},{"text":"impl Freeze for hostent","synthetic":true,"types":[]},{"text":"impl Freeze for iovec","synthetic":true,"types":[]},{"text":"impl Freeze for pollfd","synthetic":true,"types":[]},{"text":"impl Freeze for winsize","synthetic":true,"types":[]},{"text":"impl Freeze for linger","synthetic":true,"types":[]},{"text":"impl Freeze for sigval","synthetic":true,"types":[]},{"text":"impl Freeze for itimerval","synthetic":true,"types":[]},{"text":"impl Freeze for tms","synthetic":true,"types":[]},{"text":"impl Freeze for servent","synthetic":true,"types":[]},{"text":"impl Freeze for protoent","synthetic":true,"types":[]},{"text":"impl Freeze for sockaddr","synthetic":true,"types":[]},{"text":"impl Freeze for sockaddr_in6","synthetic":true,"types":[]},{"text":"impl Freeze for passwd","synthetic":true,"types":[]},{"text":"impl Freeze for ifaddrs","synthetic":true,"types":[]},{"text":"impl Freeze for fd_set","synthetic":true,"types":[]},{"text":"impl Freeze for tm","synthetic":true,"types":[]},{"text":"impl Freeze for msghdr","synthetic":true,"types":[]},{"text":"impl Freeze for cmsghdr","synthetic":true,"types":[]},{"text":"impl Freeze for fsid_t","synthetic":true,"types":[]},{"text":"impl Freeze for if_nameindex","synthetic":true,"types":[]},{"text":"impl Freeze for regex_t","synthetic":true,"types":[]},{"text":"impl Freeze for regmatch_t","synthetic":true,"types":[]},{"text":"impl Freeze for sockaddr_un","synthetic":true,"types":[]},{"text":"impl Freeze for utsname","synthetic":true,"types":[]},{"text":"impl Freeze for ip_mreq","synthetic":true,"types":[]},{"text":"impl Freeze for aiocb","synthetic":true,"types":[]},{"text":"impl Freeze for glob_t","synthetic":true,"types":[]},{"text":"impl Freeze for addrinfo","synthetic":true,"types":[]},{"text":"impl Freeze for mach_timebase_info","synthetic":true,"types":[]},{"text":"impl Freeze for stat","synthetic":true,"types":[]},{"text":"impl Freeze for pthread_mutexattr_t","synthetic":true,"types":[]},{"text":"impl Freeze for pthread_condattr_t","synthetic":true,"types":[]},{"text":"impl Freeze for pthread_rwlockattr_t","synthetic":true,"types":[]},{"text":"impl Freeze for siginfo_t","synthetic":true,"types":[]},{"text":"impl Freeze for sigaction","synthetic":true,"types":[]},{"text":"impl Freeze for stack_t","synthetic":true,"types":[]},{"text":"impl Freeze for fstore_t","synthetic":true,"types":[]},{"text":"impl Freeze for radvisory","synthetic":true,"types":[]},{"text":"impl Freeze for statvfs","synthetic":true,"types":[]},{"text":"impl Freeze for Dl_info","synthetic":true,"types":[]},{"text":"impl Freeze for sockaddr_in","synthetic":true,"types":[]},{"text":"impl Freeze for kevent64_s","synthetic":true,"types":[]},{"text":"impl Freeze for dqblk","synthetic":true,"types":[]},{"text":"impl Freeze for if_msghdr","synthetic":true,"types":[]},{"text":"impl Freeze for termios","synthetic":true,"types":[]},{"text":"impl Freeze for flock","synthetic":true,"types":[]},{"text":"impl Freeze for sf_hdtr","synthetic":true,"types":[]},{"text":"impl Freeze for lconv","synthetic":true,"types":[]},{"text":"impl Freeze for proc_taskinfo","synthetic":true,"types":[]},{"text":"impl Freeze for proc_bsdinfo","synthetic":true,"types":[]},{"text":"impl Freeze for proc_taskallinfo","synthetic":true,"types":[]},{"text":"impl Freeze for xsw_usage","synthetic":true,"types":[]},{"text":"impl Freeze for xucred","synthetic":true,"types":[]},{"text":"impl Freeze for mach_header","synthetic":true,"types":[]},{"text":"impl Freeze for mach_header_64","synthetic":true,"types":[]},{"text":"impl Freeze for segment_command","synthetic":true,"types":[]},{"text":"impl Freeze for segment_command_64","synthetic":true,"types":[]},{"text":"impl Freeze for load_command","synthetic":true,"types":[]},{"text":"impl Freeze for sockaddr_dl","synthetic":true,"types":[]},{"text":"impl Freeze for sockaddr_inarp","synthetic":true,"types":[]},{"text":"impl Freeze for sockaddr_ctl","synthetic":true,"types":[]},{"text":"impl Freeze for in_pktinfo","synthetic":true,"types":[]},{"text":"impl Freeze for in6_pktinfo","synthetic":true,"types":[]},{"text":"impl Freeze for ipc_perm","synthetic":true,"types":[]},{"text":"impl Freeze for sembuf","synthetic":true,"types":[]},{"text":"impl Freeze for arphdr","synthetic":true,"types":[]},{"text":"impl Freeze for in_addr","synthetic":true,"types":[]},{"text":"impl Freeze for sa_endpoints_t","synthetic":true,"types":[]},{"text":"impl Freeze for timex","synthetic":true,"types":[]},{"text":"impl Freeze for ntptimeval","synthetic":true,"types":[]},{"text":"impl Freeze for kevent","synthetic":true,"types":[]},{"text":"impl Freeze for semid_ds","synthetic":true,"types":[]},{"text":"impl Freeze for shmid_ds","synthetic":true,"types":[]},{"text":"impl Freeze for proc_threadinfo","synthetic":true,"types":[]},{"text":"impl Freeze for statfs","synthetic":true,"types":[]},{"text":"impl Freeze for dirent","synthetic":true,"types":[]},{"text":"impl Freeze for pthread_rwlock_t","synthetic":true,"types":[]},{"text":"impl Freeze for pthread_mutex_t","synthetic":true,"types":[]},{"text":"impl Freeze for pthread_cond_t","synthetic":true,"types":[]},{"text":"impl Freeze for sockaddr_storage","synthetic":true,"types":[]},{"text":"impl Freeze for utmpx","synthetic":true,"types":[]},{"text":"impl Freeze for sigevent","synthetic":true,"types":[]},{"text":"impl Freeze for timeval32","synthetic":true,"types":[]},{"text":"impl Freeze for if_data","synthetic":true,"types":[]},{"text":"impl Freeze for bpf_hdr","synthetic":true,"types":[]},{"text":"impl Freeze for pthread_attr_t","synthetic":true,"types":[]},{"text":"impl Freeze for ucontext_t","synthetic":true,"types":[]},{"text":"impl Freeze for __darwin_mcontext64","synthetic":true,"types":[]},{"text":"impl Freeze for __darwin_x86_exception_state64","synthetic":true,"types":[]},{"text":"impl Freeze for __darwin_x86_thread_state64","synthetic":true,"types":[]},{"text":"impl Freeze for __darwin_x86_float_state64","synthetic":true,"types":[]},{"text":"impl Freeze for __darwin_mmst_reg","synthetic":true,"types":[]},{"text":"impl Freeze for __darwin_xmm_reg","synthetic":true,"types":[]},{"text":"impl Freeze for max_align_t","synthetic":true,"types":[]},{"text":"impl Freeze for in6_addr","synthetic":true,"types":[]},{"text":"impl Freeze for semun","synthetic":true,"types":[]},{"text":"impl Freeze for DIR","synthetic":true,"types":[]},{"text":"impl Freeze for FILE","synthetic":true,"types":[]},{"text":"impl Freeze for fpos_t","synthetic":true,"types":[]},{"text":"impl Freeze for timezone","synthetic":true,"types":[]}];
implementors["log"] = [{"text":"impl&lt;'a&gt; Freeze for Record&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for RecordBuilder&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for Metadata&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for MetadataBuilder&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for SetLoggerError","synthetic":true,"types":[]},{"text":"impl Freeze for ParseLevelError","synthetic":true,"types":[]},{"text":"impl Freeze for Level","synthetic":true,"types":[]},{"text":"impl Freeze for LevelFilter","synthetic":true,"types":[]}];
implementors["num_bigint"] = [{"text":"impl Freeze for ParseBigIntError","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for TryFromBigIntError&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for BigUint","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for U32Digits&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for U64Digits&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for BigInt","synthetic":true,"types":[]},{"text":"impl Freeze for Sign","synthetic":true,"types":[]}];
implementors["num_integer"] = [{"text":"impl&lt;A&gt; Freeze for ExtendedGcd&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for IterBinomial&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["num_traits"] = [{"text":"impl Freeze for ParseFloatError","synthetic":true,"types":[]},{"text":"impl Freeze for FloatErrorKind","synthetic":true,"types":[]}];
implementors["oasis_core_runtime"] = [{"text":"impl Freeze for BUILD_INFO","synthetic":true,"types":[]},{"text":"impl Freeze for BuildInfo","synthetic":true,"types":[]},{"text":"impl Freeze for Hash","synthetic":true,"types":[]},{"text":"impl Freeze for Nonce","synthetic":true,"types":[]},{"text":"impl Freeze for PublicKey","synthetic":true,"types":[]},{"text":"impl Freeze for PrivateKey","synthetic":true,"types":[]},{"text":"impl Freeze for Signature","synthetic":true,"types":[]},{"text":"impl Freeze for SignatureBundle","synthetic":true,"types":[]},{"text":"impl Freeze for Namespace","synthetic":true,"types":[]},{"text":"impl Freeze for Quantity","synthetic":true,"types":[]},{"text":"impl Freeze for MrEnclave","synthetic":true,"types":[]},{"text":"impl Freeze for MrSigner","synthetic":true,"types":[]},{"text":"impl Freeze for AVR","synthetic":true,"types":[]},{"text":"impl Freeze for AuthenticatedAVR","synthetic":true,"types":[]},{"text":"impl Freeze for EnclaveIdentity","synthetic":true,"types":[]},{"text":"impl Freeze for Version","synthetic":true,"types":[]},{"text":"impl Freeze for Address","synthetic":true,"types":[]},{"text":"impl Freeze for ExecutorParameters","synthetic":true,"types":[]},{"text":"impl Freeze for TxnSchedulerParameters","synthetic":true,"types":[]},{"text":"impl Freeze for StorageParameters","synthetic":true,"types":[]},{"text":"impl Freeze for SchedulingConstraints","synthetic":true,"types":[]},{"text":"impl Freeze for ValidatorSetConstraint","synthetic":true,"types":[]},{"text":"impl Freeze for MaxNodesConstraint","synthetic":true,"types":[]},{"text":"impl Freeze for MinPoolSizeConstraint","synthetic":true,"types":[]},{"text":"impl Freeze for RuntimeStakingParameters","synthetic":true,"types":[]},{"text":"impl Freeze for EntityWhitelistRuntimeAdmissionPolicy","synthetic":true,"types":[]},{"text":"impl Freeze for EntityWhitelistConfig","synthetic":true,"types":[]},{"text":"impl Freeze for VersionInfo","synthetic":true,"types":[]},{"text":"impl Freeze for Runtime","synthetic":true,"types":[]},{"text":"impl Freeze for RuntimeGenesis","synthetic":true,"types":[]},{"text":"impl Freeze for RuntimeKind","synthetic":true,"types":[]},{"text":"impl Freeze for RolesMask","synthetic":true,"types":[]},{"text":"impl Freeze for RuntimeAdmissionPolicy","synthetic":true,"types":[]},{"text":"impl Freeze for RuntimeGovernanceModel","synthetic":true,"types":[]},{"text":"impl Freeze for TEEHardware","synthetic":true,"types":[]},{"text":"impl Freeze for Block","synthetic":true,"types":[]},{"text":"impl Freeze for AnnotatedBlock","synthetic":true,"types":[]},{"text":"impl Freeze for MessageEvent","synthetic":true,"types":[]},{"text":"impl Freeze for RoundResults","synthetic":true,"types":[]},{"text":"impl Freeze for Header","synthetic":true,"types":[]},{"text":"impl Freeze for ComputeResultsHeader","synthetic":true,"types":[]},{"text":"impl Freeze for HeaderType","synthetic":true,"types":[]},{"text":"impl Freeze for Message","synthetic":true,"types":[]},{"text":"impl Freeze for StakingMessage","synthetic":true,"types":[]},{"text":"impl Freeze for RegistryMessage","synthetic":true,"types":[]},{"text":"impl Freeze for Role","synthetic":true,"types":[]},{"text":"impl Freeze for CommitteeKind","synthetic":true,"types":[]},{"text":"impl Freeze for Transfer","synthetic":true,"types":[]},{"text":"impl Freeze for Withdraw","synthetic":true,"types":[]},{"text":"impl Freeze for Escrow","synthetic":true,"types":[]},{"text":"impl Freeze for ReclaimEscrow","synthetic":true,"types":[]},{"text":"impl Freeze for ThresholdKind","synthetic":true,"types":[]},{"text":"impl !Freeze for Dispatcher","synthetic":true,"types":[]},{"text":"impl Freeze for Context","synthetic":true,"types":[]},{"text":"impl Freeze for Demux","synthetic":true,"types":[]},{"text":"impl Freeze for MethodDescriptor","synthetic":true,"types":[]},{"text":"impl Freeze for Method","synthetic":true,"types":[]},{"text":"impl Freeze for Dispatcher","synthetic":true,"types":[]},{"text":"impl Freeze for SessionInfo","synthetic":true,"types":[]},{"text":"impl Freeze for Session","synthetic":true,"types":[]},{"text":"impl Freeze for RAKBinding","synthetic":true,"types":[]},{"text":"impl Freeze for Builder","synthetic":true,"types":[]},{"text":"impl Freeze for SessionID","synthetic":true,"types":[]},{"text":"impl Freeze for Frame","synthetic":true,"types":[]},{"text":"impl Freeze for Request","synthetic":true,"types":[]},{"text":"impl Freeze for Error","synthetic":true,"types":[]},{"text":"impl Freeze for Response","synthetic":true,"types":[]},{"text":"impl Freeze for Body","synthetic":true,"types":[]},{"text":"impl Freeze for Message","synthetic":true,"types":[]},{"text":"impl !Freeze for Executor","synthetic":true,"types":[]},{"text":"impl Freeze for HostInfo","synthetic":true,"types":[]},{"text":"impl !Freeze for Protocol","synthetic":true,"types":[]},{"text":"impl Freeze for ProtocolUntrustedLocalStorage","synthetic":true,"types":[]},{"text":"impl Freeze for ProtocolError","synthetic":true,"types":[]},{"text":"impl !Freeze for RAK","synthetic":true,"types":[]},{"text":"impl Freeze for StorageContext","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for OverlayTree&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for Root","synthetic":true,"types":[]},{"text":"impl !Freeze for Tree","synthetic":true,"types":[]},{"text":"impl Freeze for LogEntry","synthetic":true,"types":[]},{"text":"impl Freeze for Prefix","synthetic":true,"types":[]},{"text":"impl Freeze for NodeBox","synthetic":true,"types":[]},{"text":"impl Freeze for RootType","synthetic":true,"types":[]},{"text":"impl Freeze for LogEntryKind","synthetic":true,"types":[]},{"text":"impl Freeze for HostReadSyncer","synthetic":true,"types":[]},{"text":"impl Freeze for NoopReadSyncer","synthetic":true,"types":[]},{"text":"impl Freeze for RawProofEntry","synthetic":true,"types":[]},{"text":"impl Freeze for Proof","synthetic":true,"types":[]},{"text":"impl Freeze for ProofVerifier","synthetic":true,"types":[]},{"text":"impl Freeze for StatsCollector","synthetic":true,"types":[]},{"text":"impl Freeze for TreeID","synthetic":true,"types":[]},{"text":"impl Freeze for GetRequest","synthetic":true,"types":[]},{"text":"impl Freeze for GetPrefixesRequest","synthetic":true,"types":[]},{"text":"impl Freeze for IterateRequest","synthetic":true,"types":[]},{"text":"impl Freeze for ProofResponse","synthetic":true,"types":[]},{"text":"impl Freeze for SyncerError","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for Context&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for ExecuteTxResult","synthetic":true,"types":[]},{"text":"impl Freeze for ExecuteBatchResult","synthetic":true,"types":[]},{"text":"impl Freeze for NoopDispatcher","synthetic":true,"types":[]},{"text":"impl Freeze for CheckOnlySuccess","synthetic":true,"types":[]},{"text":"impl Freeze for MethodDescriptor","synthetic":true,"types":[]},{"text":"impl Freeze for Method","synthetic":true,"types":[]},{"text":"impl Freeze for MethodDispatcher","synthetic":true,"types":[]},{"text":"impl Freeze for CoarsenedKey","synthetic":true,"types":[]},{"text":"impl Freeze for ReadWriteSet","synthetic":true,"types":[]},{"text":"impl Freeze for Tag","synthetic":true,"types":[]},{"text":"impl !Freeze for Tree","synthetic":true,"types":[]},{"text":"impl Freeze for TxnCall","synthetic":true,"types":[]},{"text":"impl Freeze for TxnCheckResult","synthetic":true,"types":[]},{"text":"impl Freeze for TxnBatch","synthetic":true,"types":[]},{"text":"impl Freeze for TxnOutput","synthetic":true,"types":[]},{"text":"impl Freeze for ComputedBatch","synthetic":true,"types":[]},{"text":"impl Freeze for Error","synthetic":true,"types":[]},{"text":"impl Freeze for CheckTxResult","synthetic":true,"types":[]},{"text":"impl Freeze for Message","synthetic":true,"types":[]},{"text":"impl Freeze for StorageSyncRequest","synthetic":true,"types":[]},{"text":"impl Freeze for StorageSyncResponse","synthetic":true,"types":[]},{"text":"impl Freeze for HostStorageEndpoint","synthetic":true,"types":[]},{"text":"impl Freeze for Body","synthetic":true,"types":[]},{"text":"impl Freeze for MessageType","synthetic":true,"types":[]}];
implementors["oasis_runtime_sdk"] = [{"text":"impl&lt;'a&gt; Freeze for DispatchContext&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, 'b&gt; Freeze for TxContext&lt;'a, 'b&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for Error","synthetic":true,"types":[]},{"text":"impl Freeze for Mode","synthetic":true,"types":[]},{"text":"impl Freeze for Signature","synthetic":true,"types":[]},{"text":"impl Freeze for PublicKey","synthetic":true,"types":[]},{"text":"impl Freeze for Error","synthetic":true,"types":[]},{"text":"impl Freeze for PublicKey","synthetic":true,"types":[]},{"text":"impl Freeze for PublicKey","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Freeze for Dispatcher&lt;R&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for Error","synthetic":true,"types":[]},{"text":"impl Freeze for CallableMethodInfo","synthetic":true,"types":[]},{"text":"impl Freeze for QueryMethodInfo","synthetic":true,"types":[]},{"text":"impl Freeze for MethodRegistry","synthetic":true,"types":[]},{"text":"impl Freeze for Parameters","synthetic":true,"types":[]},{"text":"impl Freeze for Genesis","synthetic":true,"types":[]},{"text":"impl Freeze for Module","synthetic":true,"types":[]},{"text":"impl Freeze for Error","synthetic":true,"types":[]},{"text":"impl Freeze for Event","synthetic":true,"types":[]},{"text":"impl Freeze for Transfer","synthetic":true,"types":[]},{"text":"impl Freeze for Account","synthetic":true,"types":[]},{"text":"impl Freeze for NonceQuery","synthetic":true,"types":[]},{"text":"impl Freeze for BalancesQuery","synthetic":true,"types":[]},{"text":"impl Freeze for AccountBalances","synthetic":true,"types":[]},{"text":"impl Freeze for Error","synthetic":true,"types":[]},{"text":"impl Freeze for Metadata","synthetic":true,"types":[]},{"text":"impl&lt;M&gt; Freeze for MKVSStore&lt;M&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;M: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; Freeze for OverlayStore&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'store, S&gt; Freeze for PrefixStore&lt;'store, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; Freeze for TypedStore&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl !Freeze for Mock","synthetic":true,"types":[]},{"text":"impl Freeze for Address","synthetic":true,"types":[]},{"text":"impl Freeze for Error","synthetic":true,"types":[]},{"text":"impl Freeze for Denomination","synthetic":true,"types":[]},{"text":"impl Freeze for BaseUnits","synthetic":true,"types":[]},{"text":"impl Freeze for Error","synthetic":true,"types":[]},{"text":"impl Freeze for UnverifiedTransaction","synthetic":true,"types":[]},{"text":"impl Freeze for Transaction","synthetic":true,"types":[]},{"text":"impl Freeze for Call","synthetic":true,"types":[]},{"text":"impl Freeze for AuthInfo","synthetic":true,"types":[]},{"text":"impl Freeze for Fee","synthetic":true,"types":[]},{"text":"impl Freeze for SignerInfo","synthetic":true,"types":[]},{"text":"impl Freeze for Error","synthetic":true,"types":[]},{"text":"impl Freeze for CallResult","synthetic":true,"types":[]}];
implementors["once_cell"] = [{"text":"impl&lt;T&gt; !Freeze for OnceCell&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T, F&nbsp;=&nbsp;fn() -&gt; T&gt; !Freeze for Lazy&lt;T, F&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !Freeze for OnceCell&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T, F&nbsp;=&nbsp;fn() -&gt; T&gt; !Freeze for Lazy&lt;T, F&gt;","synthetic":true,"types":[]},{"text":"impl !Freeze for OnceNonZeroUsize","synthetic":true,"types":[]},{"text":"impl !Freeze for OnceBool","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !Freeze for OnceBox&lt;T&gt;","synthetic":true,"types":[]}];
implementors["pem"] = [{"text":"impl Freeze for EncodeConfig","synthetic":true,"types":[]},{"text":"impl Freeze for Pem","synthetic":true,"types":[]},{"text":"impl Freeze for PemError","synthetic":true,"types":[]},{"text":"impl Freeze for LineEnding","synthetic":true,"types":[]}];
implementors["percent_encoding"] = [{"text":"impl Freeze for AsciiSet","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for PercentEncode&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for PercentDecode&lt;'a&gt;","synthetic":true,"types":[]}];
implementors["pkcs8"] = [{"text":"impl Freeze for AlgorithmIdentifier","synthetic":true,"types":[]},{"text":"impl Freeze for Error","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for PrivateKeyInfo&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for SubjectPublicKeyInfo&lt;'a&gt;","synthetic":true,"types":[]}];
implementors["poly1305"] = [{"text":"impl Freeze for Poly1305","synthetic":true,"types":[]}];
implementors["polyval"] = [{"text":"impl Freeze for Polyval","synthetic":true,"types":[]}];
implementors["ppv_lite86"] = [{"text":"impl Freeze for YesS3","synthetic":true,"types":[]},{"text":"impl Freeze for NoS3","synthetic":true,"types":[]},{"text":"impl Freeze for YesS4","synthetic":true,"types":[]},{"text":"impl Freeze for NoS4","synthetic":true,"types":[]},{"text":"impl Freeze for YesA1","synthetic":true,"types":[]},{"text":"impl Freeze for NoA1","synthetic":true,"types":[]},{"text":"impl Freeze for YesA2","synthetic":true,"types":[]},{"text":"impl Freeze for NoA2","synthetic":true,"types":[]},{"text":"impl Freeze for YesNI","synthetic":true,"types":[]},{"text":"impl Freeze for NoNI","synthetic":true,"types":[]},{"text":"impl&lt;S3, S4, NI&gt; Freeze for SseMachine&lt;S3, S4, NI&gt;","synthetic":true,"types":[]},{"text":"impl&lt;NI&gt; Freeze for Avx2Machine&lt;NI&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for vec128_storage","synthetic":true,"types":[]},{"text":"impl Freeze for vec256_storage","synthetic":true,"types":[]},{"text":"impl Freeze for vec512_storage","synthetic":true,"types":[]}];
implementors["proc_macro2"] = [{"text":"impl Freeze for TokenStream","synthetic":true,"types":[]},{"text":"impl Freeze for LexError","synthetic":true,"types":[]},{"text":"impl Freeze for Span","synthetic":true,"types":[]},{"text":"impl Freeze for Group","synthetic":true,"types":[]},{"text":"impl Freeze for Punct","synthetic":true,"types":[]},{"text":"impl Freeze for Ident","synthetic":true,"types":[]},{"text":"impl Freeze for Literal","synthetic":true,"types":[]},{"text":"impl Freeze for TokenTree","synthetic":true,"types":[]},{"text":"impl Freeze for Delimiter","synthetic":true,"types":[]},{"text":"impl Freeze for Spacing","synthetic":true,"types":[]},{"text":"impl Freeze for IntoIter","synthetic":true,"types":[]}];
implementors["rand"] = [{"text":"impl Freeze for Bernoulli","synthetic":true,"types":[]},{"text":"impl Freeze for Open01","synthetic":true,"types":[]},{"text":"impl Freeze for OpenClosed01","synthetic":true,"types":[]},{"text":"impl Freeze for Alphanumeric","synthetic":true,"types":[]},{"text":"impl&lt;X&gt; Freeze for Uniform&lt;X&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;X as SampleUniform&gt;::Sampler: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for Binomial","synthetic":true,"types":[]},{"text":"impl Freeze for Cauchy","synthetic":true,"types":[]},{"text":"impl Freeze for Dirichlet","synthetic":true,"types":[]},{"text":"impl Freeze for Exp","synthetic":true,"types":[]},{"text":"impl Freeze for Exp1","synthetic":true,"types":[]},{"text":"impl Freeze for Beta","synthetic":true,"types":[]},{"text":"impl Freeze for ChiSquared","synthetic":true,"types":[]},{"text":"impl Freeze for FisherF","synthetic":true,"types":[]},{"text":"impl Freeze for Gamma","synthetic":true,"types":[]},{"text":"impl Freeze for StudentT","synthetic":true,"types":[]},{"text":"impl Freeze for LogNormal","synthetic":true,"types":[]},{"text":"impl Freeze for Normal","synthetic":true,"types":[]},{"text":"impl Freeze for StandardNormal","synthetic":true,"types":[]},{"text":"impl Freeze for Pareto","synthetic":true,"types":[]},{"text":"impl Freeze for Poisson","synthetic":true,"types":[]},{"text":"impl Freeze for Triangular","synthetic":true,"types":[]},{"text":"impl Freeze for UnitCircle","synthetic":true,"types":[]},{"text":"impl Freeze for UnitSphereSurface","synthetic":true,"types":[]},{"text":"impl Freeze for Weibull","synthetic":true,"types":[]},{"text":"impl&lt;D, R, T&gt; Freeze for DistIter&lt;D, R, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;D: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for Standard","synthetic":true,"types":[]},{"text":"impl Freeze for BernoulliError","synthetic":true,"types":[]},{"text":"impl&lt;X&gt; Freeze for UniformInt&lt;X&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;X: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;X&gt; Freeze for UniformFloat&lt;X&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;X: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for UniformDuration","synthetic":true,"types":[]},{"text":"impl&lt;X&gt; Freeze for WeightedIndex&lt;X&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;X: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;X as SampleUniform&gt;::Sampler: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for WeightedError","synthetic":true,"types":[]},{"text":"impl&lt;W&gt; Freeze for WeightedIndex&lt;W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;W as SampleUniform&gt;::Sampler: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for EntropyRng","synthetic":true,"types":[]},{"text":"impl Freeze for StdRng","synthetic":true,"types":[]},{"text":"impl Freeze for ThreadRng","synthetic":true,"types":[]},{"text":"impl Freeze for ReadError","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Freeze for ReadRng&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R, Rsdr&gt; Freeze for ReseedingRng&lt;R, Rsdr&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;Rsdr: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;R as BlockRngCore&gt;::Results: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for StepRng","synthetic":true,"types":[]},{"text":"impl&lt;'a, S:&nbsp;?Sized, T&gt; Freeze for SliceChooseIter&lt;'a, S, T&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for IndexVec","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for IndexVecIter&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for IndexVecIntoIter","synthetic":true,"types":[]}];
implementors["rand_chacha"] = [{"text":"impl Freeze for ChaCha12Core","synthetic":true,"types":[]},{"text":"impl Freeze for ChaCha12Rng","synthetic":true,"types":[]},{"text":"impl Freeze for ChaCha20Core","synthetic":true,"types":[]},{"text":"impl Freeze for ChaCha20Rng","synthetic":true,"types":[]},{"text":"impl Freeze for ChaCha8Core","synthetic":true,"types":[]},{"text":"impl Freeze for ChaCha8Rng","synthetic":true,"types":[]}];
implementors["rand_core"] = [{"text":"impl Freeze for Error","synthetic":true,"types":[]},{"text":"impl Freeze for OsRng","synthetic":true,"types":[]},{"text":"impl&lt;R:&nbsp;?Sized&gt; Freeze for BlockRng&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;R as BlockRngCore&gt;::Results: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R:&nbsp;?Sized&gt; Freeze for BlockRng64&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;R as BlockRngCore&gt;::Results: Freeze,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["regex"] = [{"text":"impl Freeze for RegexSetBuilder","synthetic":true,"types":[]},{"text":"impl Freeze for RegexBuilder","synthetic":true,"types":[]},{"text":"impl Freeze for RegexSet","synthetic":true,"types":[]},{"text":"impl Freeze for SetMatches","synthetic":true,"types":[]},{"text":"impl Freeze for SetMatchesIntoIter","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for SetMatchesIter&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for CaptureLocations","synthetic":true,"types":[]},{"text":"impl&lt;'r, 't&gt; Freeze for CaptureMatches&lt;'r, 't&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'r&gt; Freeze for CaptureNames&lt;'r&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'t&gt; Freeze for Captures&lt;'t&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'t&gt; Freeze for Match&lt;'t&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'r, 't&gt; Freeze for Matches&lt;'r, 't&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'t&gt; Freeze for NoExpand&lt;'t&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for Regex","synthetic":true,"types":[]},{"text":"impl&lt;'a, R:&nbsp;?Sized&gt; Freeze for ReplacerRef&lt;'a, R&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'r, 't&gt; Freeze for Split&lt;'r, 't&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'r, 't&gt; Freeze for SplitN&lt;'r, 't&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'c, 't&gt; Freeze for SubCaptureMatches&lt;'c, 't&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for Error","synthetic":true,"types":[]},{"text":"impl Freeze for RegexBuilder","synthetic":true,"types":[]},{"text":"impl Freeze for RegexSetBuilder","synthetic":true,"types":[]},{"text":"impl&lt;'t&gt; Freeze for Match&lt;'t&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for Regex","synthetic":true,"types":[]},{"text":"impl&lt;'r, 't&gt; Freeze for Matches&lt;'r, 't&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'r, 't&gt; Freeze for CaptureMatches&lt;'r, 't&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'r, 't&gt; Freeze for Split&lt;'r, 't&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'r, 't&gt; Freeze for SplitN&lt;'r, 't&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'r&gt; Freeze for CaptureNames&lt;'r&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for CaptureLocations","synthetic":true,"types":[]},{"text":"impl&lt;'t&gt; Freeze for Captures&lt;'t&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'c, 't&gt; Freeze for SubCaptureMatches&lt;'c, 't&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, R:&nbsp;?Sized&gt; Freeze for ReplacerRef&lt;'a, R&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'t&gt; Freeze for NoExpand&lt;'t&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for RegexSet","synthetic":true,"types":[]},{"text":"impl Freeze for SetMatches","synthetic":true,"types":[]},{"text":"impl Freeze for SetMatchesIntoIter","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for SetMatchesIter&lt;'a&gt;","synthetic":true,"types":[]}];
implementors["regex_syntax"] = [{"text":"impl !Freeze for Parser","synthetic":true,"types":[]},{"text":"impl Freeze for ParserBuilder","synthetic":true,"types":[]},{"text":"impl Freeze for UnicodeWordError","synthetic":true,"types":[]},{"text":"impl Freeze for Error","synthetic":true,"types":[]},{"text":"impl Freeze for Error","synthetic":true,"types":[]},{"text":"impl Freeze for Span","synthetic":true,"types":[]},{"text":"impl Freeze for Position","synthetic":true,"types":[]},{"text":"impl Freeze for WithComments","synthetic":true,"types":[]},{"text":"impl Freeze for Comment","synthetic":true,"types":[]},{"text":"impl Freeze for Alternation","synthetic":true,"types":[]},{"text":"impl Freeze for Concat","synthetic":true,"types":[]},{"text":"impl Freeze for Literal","synthetic":true,"types":[]},{"text":"impl Freeze for ClassPerl","synthetic":true,"types":[]},{"text":"impl Freeze for ClassAscii","synthetic":true,"types":[]},{"text":"impl Freeze for ClassUnicode","synthetic":true,"types":[]},{"text":"impl Freeze for ClassBracketed","synthetic":true,"types":[]},{"text":"impl Freeze for ClassSetRange","synthetic":true,"types":[]},{"text":"impl Freeze for ClassSetUnion","synthetic":true,"types":[]},{"text":"impl Freeze for ClassSetBinaryOp","synthetic":true,"types":[]},{"text":"impl Freeze for Assertion","synthetic":true,"types":[]},{"text":"impl Freeze for Repetition","synthetic":true,"types":[]},{"text":"impl Freeze for RepetitionOp","synthetic":true,"types":[]},{"text":"impl Freeze for Group","synthetic":true,"types":[]},{"text":"impl Freeze for CaptureName","synthetic":true,"types":[]},{"text":"impl Freeze for SetFlags","synthetic":true,"types":[]},{"text":"impl Freeze for Flags","synthetic":true,"types":[]},{"text":"impl Freeze for FlagsItem","synthetic":true,"types":[]},{"text":"impl Freeze for ErrorKind","synthetic":true,"types":[]},{"text":"impl Freeze for Ast","synthetic":true,"types":[]},{"text":"impl Freeze for LiteralKind","synthetic":true,"types":[]},{"text":"impl Freeze for SpecialLiteralKind","synthetic":true,"types":[]},{"text":"impl Freeze for HexLiteralKind","synthetic":true,"types":[]},{"text":"impl Freeze for Class","synthetic":true,"types":[]},{"text":"impl Freeze for ClassPerlKind","synthetic":true,"types":[]},{"text":"impl Freeze for ClassAsciiKind","synthetic":true,"types":[]},{"text":"impl Freeze for ClassUnicodeKind","synthetic":true,"types":[]},{"text":"impl Freeze for ClassUnicodeOpKind","synthetic":true,"types":[]},{"text":"impl Freeze for ClassSet","synthetic":true,"types":[]},{"text":"impl Freeze for ClassSetItem","synthetic":true,"types":[]},{"text":"impl Freeze for ClassSetBinaryOpKind","synthetic":true,"types":[]},{"text":"impl Freeze for AssertionKind","synthetic":true,"types":[]},{"text":"impl Freeze for RepetitionKind","synthetic":true,"types":[]},{"text":"impl Freeze for RepetitionRange","synthetic":true,"types":[]},{"text":"impl Freeze for GroupKind","synthetic":true,"types":[]},{"text":"impl Freeze for FlagsItemKind","synthetic":true,"types":[]},{"text":"impl Freeze for Flag","synthetic":true,"types":[]},{"text":"impl Freeze for ParserBuilder","synthetic":true,"types":[]},{"text":"impl !Freeze for Parser","synthetic":true,"types":[]},{"text":"impl Freeze for Printer","synthetic":true,"types":[]},{"text":"impl Freeze for CaseFoldError","synthetic":true,"types":[]},{"text":"impl Freeze for Error","synthetic":true,"types":[]},{"text":"impl Freeze for Hir","synthetic":true,"types":[]},{"text":"impl Freeze for ClassUnicode","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for ClassUnicodeIter&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for ClassUnicodeRange","synthetic":true,"types":[]},{"text":"impl Freeze for ClassBytes","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for ClassBytesIter&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for ClassBytesRange","synthetic":true,"types":[]},{"text":"impl Freeze for Group","synthetic":true,"types":[]},{"text":"impl Freeze for Repetition","synthetic":true,"types":[]},{"text":"impl Freeze for ErrorKind","synthetic":true,"types":[]},{"text":"impl Freeze for HirKind","synthetic":true,"types":[]},{"text":"impl Freeze for Literal","synthetic":true,"types":[]},{"text":"impl Freeze for Class","synthetic":true,"types":[]},{"text":"impl Freeze for Anchor","synthetic":true,"types":[]},{"text":"impl Freeze for WordBoundary","synthetic":true,"types":[]},{"text":"impl Freeze for GroupKind","synthetic":true,"types":[]},{"text":"impl Freeze for RepetitionKind","synthetic":true,"types":[]},{"text":"impl Freeze for RepetitionRange","synthetic":true,"types":[]},{"text":"impl Freeze for Literals","synthetic":true,"types":[]},{"text":"impl Freeze for Literal","synthetic":true,"types":[]},{"text":"impl Freeze for Printer","synthetic":true,"types":[]},{"text":"impl Freeze for TranslatorBuilder","synthetic":true,"types":[]},{"text":"impl !Freeze for Translator","synthetic":true,"types":[]},{"text":"impl Freeze for Utf8Range","synthetic":true,"types":[]},{"text":"impl Freeze for Utf8Sequences","synthetic":true,"types":[]},{"text":"impl Freeze for Utf8Sequence","synthetic":true,"types":[]}];
implementors["ring"] = [{"text":"impl Freeze for TestCase","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for File&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for Nonce","synthetic":true,"types":[]},{"text":"impl&lt;N&gt; Freeze for OpeningKey&lt;N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;N&gt; Freeze for SealingKey&lt;N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A&gt; Freeze for Aad&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for UnboundKey","synthetic":true,"types":[]},{"text":"impl Freeze for LessSafeKey","synthetic":true,"types":[]},{"text":"impl Freeze for Algorithm","synthetic":true,"types":[]},{"text":"impl Freeze for Tag","synthetic":true,"types":[]},{"text":"impl Freeze for SealingKey","synthetic":true,"types":[]},{"text":"impl Freeze for OpeningKey","synthetic":true,"types":[]},{"text":"impl Freeze for HeaderProtectionKey","synthetic":true,"types":[]},{"text":"impl Freeze for Algorithm","synthetic":true,"types":[]},{"text":"impl Freeze for Algorithm","synthetic":true,"types":[]},{"text":"impl Freeze for EphemeralPrivateKey","synthetic":true,"types":[]},{"text":"impl Freeze for PublicKey","synthetic":true,"types":[]},{"text":"impl&lt;B&gt; Freeze for UnparsedPublicKey&lt;B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;B: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for Positive&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for Context","synthetic":true,"types":[]},{"text":"impl Freeze for Digest","synthetic":true,"types":[]},{"text":"impl Freeze for Algorithm","synthetic":true,"types":[]},{"text":"impl Freeze for Ed25519KeyPair","synthetic":true,"types":[]},{"text":"impl Freeze for EdDSAParameters","synthetic":true,"types":[]},{"text":"impl Freeze for EcdsaSigningAlgorithm","synthetic":true,"types":[]},{"text":"impl Freeze for EcdsaKeyPair","synthetic":true,"types":[]},{"text":"impl Freeze for EcdsaVerificationAlgorithm","synthetic":true,"types":[]},{"text":"impl Freeze for Unspecified","synthetic":true,"types":[]},{"text":"impl Freeze for KeyRejected","synthetic":true,"types":[]},{"text":"impl Freeze for Algorithm","synthetic":true,"types":[]},{"text":"impl Freeze for Salt","synthetic":true,"types":[]},{"text":"impl Freeze for Prk","synthetic":true,"types":[]},{"text":"impl&lt;'a, L&gt; Freeze for Okm&lt;'a, L&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;L: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for Algorithm","synthetic":true,"types":[]},{"text":"impl Freeze for Tag","synthetic":true,"types":[]},{"text":"impl Freeze for Key","synthetic":true,"types":[]},{"text":"impl Freeze for Context","synthetic":true,"types":[]},{"text":"impl Freeze for Algorithm","synthetic":true,"types":[]},{"text":"impl Freeze for Document","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for Random&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for SystemRandom","synthetic":true,"types":[]},{"text":"impl Freeze for RsaParameters","synthetic":true,"types":[]},{"text":"impl&lt;B&gt; Freeze for RsaPublicKeyComponents&lt;B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;B: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for RsaKeyPair","synthetic":true,"types":[]},{"text":"impl Freeze for RsaSubjectPublicKey","synthetic":true,"types":[]},{"text":"impl Freeze for Signature","synthetic":true,"types":[]},{"text":"impl&lt;B&gt; Freeze for UnparsedPublicKey&lt;B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;B: Freeze,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["rustc_hex"] = [{"text":"impl&lt;T&gt; Freeze for ToHexIter&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for FromHexIter&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for FromHexError","synthetic":true,"types":[]}];
implementors["ryu"] = [{"text":"impl Freeze for Buffer","synthetic":true,"types":[]}];
implementors["scopeguard"] = [{"text":"impl&lt;T, F, S&gt; Freeze for ScopeGuard&lt;T, F, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for Always","synthetic":true,"types":[]}];
implementors["serde"] = [{"text":"impl Freeze for IgnoredAny","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for Unexpected&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for Error","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Freeze for UnitDeserializer&lt;E&gt;","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Freeze for BoolDeserializer&lt;E&gt;","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Freeze for I8Deserializer&lt;E&gt;","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Freeze for I16Deserializer&lt;E&gt;","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Freeze for I32Deserializer&lt;E&gt;","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Freeze for I64Deserializer&lt;E&gt;","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Freeze for IsizeDeserializer&lt;E&gt;","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Freeze for U8Deserializer&lt;E&gt;","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Freeze for U16Deserializer&lt;E&gt;","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Freeze for U64Deserializer&lt;E&gt;","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Freeze for UsizeDeserializer&lt;E&gt;","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Freeze for F32Deserializer&lt;E&gt;","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Freeze for F64Deserializer&lt;E&gt;","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Freeze for CharDeserializer&lt;E&gt;","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Freeze for I128Deserializer&lt;E&gt;","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Freeze for U128Deserializer&lt;E&gt;","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Freeze for U32Deserializer&lt;E&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, E&gt; Freeze for StrDeserializer&lt;'a, E&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'de, E&gt; Freeze for BorrowedStrDeserializer&lt;'de, E&gt;","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Freeze for StringDeserializer&lt;E&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, E&gt; Freeze for CowStrDeserializer&lt;'a, E&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, E&gt; Freeze for BytesDeserializer&lt;'a, E&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'de, E&gt; Freeze for BorrowedBytesDeserializer&lt;'de, E&gt;","synthetic":true,"types":[]},{"text":"impl&lt;I, E&gt; Freeze for SeqDeserializer&lt;I, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A&gt; Freeze for SeqAccessDeserializer&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'de, I, E&gt; Freeze for MapDeserializer&lt;'de, I, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt;I as Iterator&gt;::Item as Pair&gt;::Second: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A&gt; Freeze for MapAccessDeserializer&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Ok, Error&gt; Freeze for Impossible&lt;Ok, Error&gt;","synthetic":true,"types":[]}];
implementors["serde_bytes"] = [{"text":"impl Freeze for Bytes","synthetic":true,"types":[]},{"text":"impl Freeze for ByteBuf","synthetic":true,"types":[]}];
implementors["serde_cbor"] = [{"text":"impl&lt;R&gt; Freeze for Deserializer&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'de, R, T&gt; Freeze for StreamDeserializer&lt;'de, R, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for Error","synthetic":true,"types":[]},{"text":"impl&lt;W&gt; Freeze for Serializer&lt;W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;W: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for Value","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Freeze for IoRead&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for SliceRead&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for MutSliceRead&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, 'b&gt; Freeze for SliceReadFixed&lt;'a, 'b&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for Category","synthetic":true,"types":[]},{"text":"impl&lt;W&gt; Freeze for IoWrite&lt;W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;W: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for SliceWrite&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for Tagged&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["serde_json"] = [{"text":"impl&lt;R&gt; Freeze for Deserializer&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'de, R, T&gt; Freeze for StreamDeserializer&lt;'de, R, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for Error","synthetic":true,"types":[]},{"text":"impl&lt;W, F&gt; Freeze for Serializer&lt;W, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;W: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;K, V&gt; Freeze for Map&lt;K, V&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for Number","synthetic":true,"types":[]},{"text":"impl Freeze for Value","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for SliceRead&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for StrRead&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Freeze for IoRead&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for Category","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for VacantEntry&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for OccupiedEntry&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for Iter&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for IterMut&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for IntoIter","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for Keys&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for Values&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for ValuesMut&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for Entry&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for CompactFormatter","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for PrettyFormatter&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for CharEscape","synthetic":true,"types":[]},{"text":"impl Freeze for Serializer","synthetic":true,"types":[]}];
implementors["sgx_isa"] = [{"text":"impl Freeze for Secs","synthetic":true,"types":[]},{"text":"impl Freeze for Attributes","synthetic":true,"types":[]},{"text":"impl Freeze for AttributesFlags","synthetic":true,"types":[]},{"text":"impl Freeze for Miscselect","synthetic":true,"types":[]},{"text":"impl Freeze for Tcs","synthetic":true,"types":[]},{"text":"impl Freeze for TcsFlags","synthetic":true,"types":[]},{"text":"impl Freeze for Pageinfo","synthetic":true,"types":[]},{"text":"impl Freeze for Secinfo","synthetic":true,"types":[]},{"text":"impl Freeze for SecinfoFlags","synthetic":true,"types":[]},{"text":"impl Freeze for Pcmd","synthetic":true,"types":[]},{"text":"impl Freeze for Sigstruct","synthetic":true,"types":[]},{"text":"impl Freeze for Einittoken","synthetic":true,"types":[]},{"text":"impl Freeze for Report","synthetic":true,"types":[]},{"text":"impl Freeze for Targetinfo","synthetic":true,"types":[]},{"text":"impl Freeze for Keyrequest","synthetic":true,"types":[]},{"text":"impl Freeze for Keypolicy","synthetic":true,"types":[]},{"text":"impl Freeze for Encls","synthetic":true,"types":[]},{"text":"impl Freeze for Enclu","synthetic":true,"types":[]},{"text":"impl Freeze for ErrorCode","synthetic":true,"types":[]},{"text":"impl Freeze for PageType","synthetic":true,"types":[]},{"text":"impl Freeze for Keyname","synthetic":true,"types":[]}];
implementors["sha2"] = [{"text":"impl Freeze for Sha224","synthetic":true,"types":[]},{"text":"impl Freeze for Sha256","synthetic":true,"types":[]},{"text":"impl Freeze for Sha384","synthetic":true,"types":[]},{"text":"impl Freeze for Sha512","synthetic":true,"types":[]},{"text":"impl Freeze for Sha512Trunc224","synthetic":true,"types":[]},{"text":"impl Freeze for Sha512Trunc256","synthetic":true,"types":[]}];
implementors["signature"] = [{"text":"impl Freeze for Error","synthetic":true,"types":[]}];
implementors["slog"] = [{"text":"impl&lt;D&gt; Freeze for Logger&lt;D&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;D: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for Discard","synthetic":true,"types":[]},{"text":"impl&lt;D, F&gt; Freeze for Filter&lt;D, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;D: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;D&gt; Freeze for LevelFilter&lt;D&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;D: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;D, E&gt; Freeze for MapError&lt;D, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;D: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;D1, D2&gt; Freeze for Duplicate&lt;D1, D2&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;D1: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;D2: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;D&gt; Freeze for Fuse&lt;D&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;D: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;D&gt; Freeze for IgnoreResult&lt;D&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;D: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for RecordStatic&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for Record&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;V, F&gt; Freeze for FnValue&lt;V, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for PushFnValueSerializer&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;F&gt; Freeze for PushFnValue&lt;F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Freeze for ErrorValue&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;V&gt; Freeze for SingleKV&lt;V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;V: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T:&nbsp;?Sized&gt; Freeze for OwnedKV&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for BorrowedKV&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for OwnedKVList","synthetic":true,"types":[]},{"text":"impl&lt;D&gt; Freeze for MutexDrainError&lt;D&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;D as Drain&gt;::Err: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for Level","synthetic":true,"types":[]},{"text":"impl Freeze for FilterLevel","synthetic":true,"types":[]},{"text":"impl Freeze for Error","synthetic":true,"types":[]}];
implementors["slog_json"] = [{"text":"impl&lt;W&gt; !Freeze for Json&lt;W&gt;","synthetic":true,"types":[]},{"text":"impl&lt;W&gt; Freeze for JsonBuilder&lt;W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;W: Freeze,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["slog_scope"] = [{"text":"impl Freeze for GlobalLoggerGuard","synthetic":true,"types":[]}];
implementors["slog_stdlog"] = [{"text":"impl Freeze for StdLog","synthetic":true,"types":[]}];
implementors["snow"] = [{"text":"impl&lt;'builder&gt; Freeze for Builder&lt;'builder&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for Keypair","synthetic":true,"types":[]},{"text":"impl Freeze for HandshakeState","synthetic":true,"types":[]},{"text":"impl Freeze for StatelessTransportState","synthetic":true,"types":[]},{"text":"impl Freeze for TransportState","synthetic":true,"types":[]},{"text":"impl Freeze for Error","synthetic":true,"types":[]},{"text":"impl Freeze for PatternProblem","synthetic":true,"types":[]},{"text":"impl Freeze for InitStage","synthetic":true,"types":[]},{"text":"impl Freeze for Prerequisite","synthetic":true,"types":[]},{"text":"impl Freeze for StateProblem","synthetic":true,"types":[]},{"text":"impl Freeze for HandshakeChoice","synthetic":true,"types":[]},{"text":"impl Freeze for NoiseParams","synthetic":true,"types":[]},{"text":"impl Freeze for HandshakeModifier","synthetic":true,"types":[]},{"text":"impl Freeze for HandshakePattern","synthetic":true,"types":[]},{"text":"impl Freeze for BaseChoice","synthetic":true,"types":[]},{"text":"impl Freeze for DHChoice","synthetic":true,"types":[]},{"text":"impl Freeze for CipherChoice","synthetic":true,"types":[]},{"text":"impl Freeze for HashChoice","synthetic":true,"types":[]},{"text":"impl Freeze for DefaultResolver","synthetic":true,"types":[]},{"text":"impl Freeze for RingResolver","synthetic":true,"types":[]},{"text":"impl Freeze for FallbackResolver","synthetic":true,"types":[]}];
implementors["sp800_185"] = [{"text":"impl Freeze for CShake","synthetic":true,"types":[]},{"text":"impl Freeze for KMac","synthetic":true,"types":[]},{"text":"impl Freeze for TupleHash","synthetic":true,"types":[]}];
implementors["spin"] = [{"text":"impl&lt;T&gt; !Freeze for Mutex&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T:&nbsp;?Sized&gt; Freeze for MutexGuard&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !Freeze for RwLock&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T:&nbsp;?Sized&gt; Freeze for RwLockReadGuard&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T:&nbsp;?Sized&gt; Freeze for RwLockWriteGuard&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T:&nbsp;?Sized&gt; Freeze for RwLockUpgradeableGuard&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !Freeze for Once&lt;T&gt;","synthetic":true,"types":[]}];
implementors["stream_cipher"] = [{"text":"impl Freeze for InvalidKeyNonceLength","synthetic":true,"types":[]},{"text":"impl Freeze for LoopError","synthetic":true,"types":[]},{"text":"impl Freeze for OverflowError","synthetic":true,"types":[]}];
implementors["strsim"] = [{"text":"impl Freeze for StrSimError","synthetic":true,"types":[]}];
implementors["subtle"] = [{"text":"impl Freeze for Choice","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for CtOption&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["syn"] = [{"text":"impl Freeze for Attribute","synthetic":true,"types":[]},{"text":"impl Freeze for MetaList","synthetic":true,"types":[]},{"text":"impl Freeze for MetaNameValue","synthetic":true,"types":[]},{"text":"impl Freeze for Field","synthetic":true,"types":[]},{"text":"impl Freeze for FieldsNamed","synthetic":true,"types":[]},{"text":"impl Freeze for FieldsUnnamed","synthetic":true,"types":[]},{"text":"impl Freeze for Variant","synthetic":true,"types":[]},{"text":"impl Freeze for VisCrate","synthetic":true,"types":[]},{"text":"impl Freeze for VisPublic","synthetic":true,"types":[]},{"text":"impl Freeze for VisRestricted","synthetic":true,"types":[]},{"text":"impl Freeze for Arm","synthetic":true,"types":[]},{"text":"impl Freeze for FieldValue","synthetic":true,"types":[]},{"text":"impl Freeze for Label","synthetic":true,"types":[]},{"text":"impl Freeze for MethodTurbofish","synthetic":true,"types":[]},{"text":"impl Freeze for ExprArray","synthetic":true,"types":[]},{"text":"impl Freeze for ExprAssign","synthetic":true,"types":[]},{"text":"impl Freeze for ExprAssignOp","synthetic":true,"types":[]},{"text":"impl Freeze for ExprAsync","synthetic":true,"types":[]},{"text":"impl Freeze for ExprAwait","synthetic":true,"types":[]},{"text":"impl Freeze for ExprBinary","synthetic":true,"types":[]},{"text":"impl Freeze for ExprBlock","synthetic":true,"types":[]},{"text":"impl Freeze for ExprBox","synthetic":true,"types":[]},{"text":"impl Freeze for ExprBreak","synthetic":true,"types":[]},{"text":"impl Freeze for ExprCall","synthetic":true,"types":[]},{"text":"impl Freeze for ExprCast","synthetic":true,"types":[]},{"text":"impl Freeze for ExprClosure","synthetic":true,"types":[]},{"text":"impl Freeze for ExprContinue","synthetic":true,"types":[]},{"text":"impl Freeze for ExprField","synthetic":true,"types":[]},{"text":"impl Freeze for ExprForLoop","synthetic":true,"types":[]},{"text":"impl Freeze for ExprGroup","synthetic":true,"types":[]},{"text":"impl Freeze for ExprIf","synthetic":true,"types":[]},{"text":"impl Freeze for ExprIndex","synthetic":true,"types":[]},{"text":"impl Freeze for ExprLet","synthetic":true,"types":[]},{"text":"impl Freeze for ExprLit","synthetic":true,"types":[]},{"text":"impl Freeze for ExprLoop","synthetic":true,"types":[]},{"text":"impl Freeze for ExprMacro","synthetic":true,"types":[]},{"text":"impl Freeze for ExprMatch","synthetic":true,"types":[]},{"text":"impl Freeze for ExprMethodCall","synthetic":true,"types":[]},{"text":"impl Freeze for ExprParen","synthetic":true,"types":[]},{"text":"impl Freeze for ExprPath","synthetic":true,"types":[]},{"text":"impl Freeze for ExprRange","synthetic":true,"types":[]},{"text":"impl Freeze for ExprReference","synthetic":true,"types":[]},{"text":"impl Freeze for ExprRepeat","synthetic":true,"types":[]},{"text":"impl Freeze for ExprReturn","synthetic":true,"types":[]},{"text":"impl Freeze for ExprStruct","synthetic":true,"types":[]},{"text":"impl Freeze for ExprTry","synthetic":true,"types":[]},{"text":"impl Freeze for ExprTryBlock","synthetic":true,"types":[]},{"text":"impl Freeze for ExprTuple","synthetic":true,"types":[]},{"text":"impl Freeze for ExprType","synthetic":true,"types":[]},{"text":"impl Freeze for ExprUnary","synthetic":true,"types":[]},{"text":"impl Freeze for ExprUnsafe","synthetic":true,"types":[]},{"text":"impl Freeze for ExprWhile","synthetic":true,"types":[]},{"text":"impl Freeze for ExprYield","synthetic":true,"types":[]},{"text":"impl Freeze for Index","synthetic":true,"types":[]},{"text":"impl Freeze for BoundLifetimes","synthetic":true,"types":[]},{"text":"impl Freeze for ConstParam","synthetic":true,"types":[]},{"text":"impl Freeze for Generics","synthetic":true,"types":[]},{"text":"impl Freeze for LifetimeDef","synthetic":true,"types":[]},{"text":"impl Freeze for PredicateEq","synthetic":true,"types":[]},{"text":"impl Freeze for PredicateLifetime","synthetic":true,"types":[]},{"text":"impl Freeze for PredicateType","synthetic":true,"types":[]},{"text":"impl Freeze for TraitBound","synthetic":true,"types":[]},{"text":"impl Freeze for TypeParam","synthetic":true,"types":[]},{"text":"impl Freeze for WhereClause","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for ImplGenerics&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for Turbofish&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for TypeGenerics&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for ForeignItemFn","synthetic":true,"types":[]},{"text":"impl Freeze for ForeignItemMacro","synthetic":true,"types":[]},{"text":"impl Freeze for ForeignItemStatic","synthetic":true,"types":[]},{"text":"impl Freeze for ForeignItemType","synthetic":true,"types":[]},{"text":"impl Freeze for ImplItemConst","synthetic":true,"types":[]},{"text":"impl Freeze for ImplItemMacro","synthetic":true,"types":[]},{"text":"impl Freeze for ImplItemMethod","synthetic":true,"types":[]},{"text":"impl Freeze for ImplItemType","synthetic":true,"types":[]},{"text":"impl Freeze for ItemConst","synthetic":true,"types":[]},{"text":"impl Freeze for ItemEnum","synthetic":true,"types":[]},{"text":"impl Freeze for ItemExternCrate","synthetic":true,"types":[]},{"text":"impl Freeze for ItemFn","synthetic":true,"types":[]},{"text":"impl Freeze for ItemForeignMod","synthetic":true,"types":[]},{"text":"impl Freeze for ItemImpl","synthetic":true,"types":[]},{"text":"impl Freeze for ItemMacro","synthetic":true,"types":[]},{"text":"impl Freeze for ItemMacro2","synthetic":true,"types":[]},{"text":"impl Freeze for ItemMod","synthetic":true,"types":[]},{"text":"impl Freeze for ItemStatic","synthetic":true,"types":[]},{"text":"impl Freeze for ItemStruct","synthetic":true,"types":[]},{"text":"impl Freeze for ItemTrait","synthetic":true,"types":[]},{"text":"impl Freeze for ItemTraitAlias","synthetic":true,"types":[]},{"text":"impl Freeze for ItemType","synthetic":true,"types":[]},{"text":"impl Freeze for ItemUnion","synthetic":true,"types":[]},{"text":"impl Freeze for ItemUse","synthetic":true,"types":[]},{"text":"impl Freeze for Receiver","synthetic":true,"types":[]},{"text":"impl Freeze for Signature","synthetic":true,"types":[]},{"text":"impl Freeze for TraitItemConst","synthetic":true,"types":[]},{"text":"impl Freeze for TraitItemMacro","synthetic":true,"types":[]},{"text":"impl Freeze for TraitItemMethod","synthetic":true,"types":[]},{"text":"impl Freeze for TraitItemType","synthetic":true,"types":[]},{"text":"impl Freeze for UseGlob","synthetic":true,"types":[]},{"text":"impl Freeze for UseGroup","synthetic":true,"types":[]},{"text":"impl Freeze for UseName","synthetic":true,"types":[]},{"text":"impl Freeze for UsePath","synthetic":true,"types":[]},{"text":"impl Freeze for UseRename","synthetic":true,"types":[]},{"text":"impl Freeze for File","synthetic":true,"types":[]},{"text":"impl Freeze for Lifetime","synthetic":true,"types":[]},{"text":"impl Freeze for LitBool","synthetic":true,"types":[]},{"text":"impl Freeze for LitByte","synthetic":true,"types":[]},{"text":"impl Freeze for LitByteStr","synthetic":true,"types":[]},{"text":"impl Freeze for LitChar","synthetic":true,"types":[]},{"text":"impl Freeze for LitFloat","synthetic":true,"types":[]},{"text":"impl Freeze for LitInt","synthetic":true,"types":[]},{"text":"impl Freeze for LitStr","synthetic":true,"types":[]},{"text":"impl Freeze for Macro","synthetic":true,"types":[]},{"text":"impl Freeze for DataEnum","synthetic":true,"types":[]},{"text":"impl Freeze for DataStruct","synthetic":true,"types":[]},{"text":"impl Freeze for DataUnion","synthetic":true,"types":[]},{"text":"impl Freeze for DeriveInput","synthetic":true,"types":[]},{"text":"impl Freeze for Block","synthetic":true,"types":[]},{"text":"impl Freeze for Local","synthetic":true,"types":[]},{"text":"impl Freeze for Abi","synthetic":true,"types":[]},{"text":"impl Freeze for BareFnArg","synthetic":true,"types":[]},{"text":"impl Freeze for TypeArray","synthetic":true,"types":[]},{"text":"impl Freeze for TypeBareFn","synthetic":true,"types":[]},{"text":"impl Freeze for TypeGroup","synthetic":true,"types":[]},{"text":"impl Freeze for TypeImplTrait","synthetic":true,"types":[]},{"text":"impl Freeze for TypeInfer","synthetic":true,"types":[]},{"text":"impl Freeze for TypeMacro","synthetic":true,"types":[]},{"text":"impl Freeze for TypeNever","synthetic":true,"types":[]},{"text":"impl Freeze for TypeParen","synthetic":true,"types":[]},{"text":"impl Freeze for TypePath","synthetic":true,"types":[]},{"text":"impl Freeze for TypePtr","synthetic":true,"types":[]},{"text":"impl Freeze for TypeReference","synthetic":true,"types":[]},{"text":"impl Freeze for TypeSlice","synthetic":true,"types":[]},{"text":"impl Freeze for TypeTraitObject","synthetic":true,"types":[]},{"text":"impl Freeze for TypeTuple","synthetic":true,"types":[]},{"text":"impl Freeze for Variadic","synthetic":true,"types":[]},{"text":"impl Freeze for FieldPat","synthetic":true,"types":[]},{"text":"impl Freeze for PatBox","synthetic":true,"types":[]},{"text":"impl Freeze for PatIdent","synthetic":true,"types":[]},{"text":"impl Freeze for PatLit","synthetic":true,"types":[]},{"text":"impl Freeze for PatMacro","synthetic":true,"types":[]},{"text":"impl Freeze for PatOr","synthetic":true,"types":[]},{"text":"impl Freeze for PatPath","synthetic":true,"types":[]},{"text":"impl Freeze for PatRange","synthetic":true,"types":[]},{"text":"impl Freeze for PatReference","synthetic":true,"types":[]},{"text":"impl Freeze for PatRest","synthetic":true,"types":[]},{"text":"impl Freeze for PatSlice","synthetic":true,"types":[]},{"text":"impl Freeze for PatStruct","synthetic":true,"types":[]},{"text":"impl Freeze for PatTuple","synthetic":true,"types":[]},{"text":"impl Freeze for PatTupleStruct","synthetic":true,"types":[]},{"text":"impl Freeze for PatType","synthetic":true,"types":[]},{"text":"impl Freeze for PatWild","synthetic":true,"types":[]},{"text":"impl Freeze for AngleBracketedGenericArguments","synthetic":true,"types":[]},{"text":"impl Freeze for Binding","synthetic":true,"types":[]},{"text":"impl Freeze for Constraint","synthetic":true,"types":[]},{"text":"impl Freeze for ParenthesizedGenericArguments","synthetic":true,"types":[]},{"text":"impl Freeze for Path","synthetic":true,"types":[]},{"text":"impl Freeze for PathSegment","synthetic":true,"types":[]},{"text":"impl Freeze for QSelf","synthetic":true,"types":[]},{"text":"impl Freeze for Error","synthetic":true,"types":[]},{"text":"impl Freeze for AttrStyle","synthetic":true,"types":[]},{"text":"impl Freeze for Meta","synthetic":true,"types":[]},{"text":"impl Freeze for NestedMeta","synthetic":true,"types":[]},{"text":"impl Freeze for Fields","synthetic":true,"types":[]},{"text":"impl Freeze for Visibility","synthetic":true,"types":[]},{"text":"impl Freeze for GenericMethodArgument","synthetic":true,"types":[]},{"text":"impl Freeze for RangeLimits","synthetic":true,"types":[]},{"text":"impl Freeze for Expr","synthetic":true,"types":[]},{"text":"impl Freeze for Member","synthetic":true,"types":[]},{"text":"impl Freeze for GenericParam","synthetic":true,"types":[]},{"text":"impl Freeze for TraitBoundModifier","synthetic":true,"types":[]},{"text":"impl Freeze for TypeParamBound","synthetic":true,"types":[]},{"text":"impl Freeze for WherePredicate","synthetic":true,"types":[]},{"text":"impl Freeze for FnArg","synthetic":true,"types":[]},{"text":"impl Freeze for ForeignItem","synthetic":true,"types":[]},{"text":"impl Freeze for ImplItem","synthetic":true,"types":[]},{"text":"impl Freeze for Item","synthetic":true,"types":[]},{"text":"impl Freeze for TraitItem","synthetic":true,"types":[]},{"text":"impl Freeze for UseTree","synthetic":true,"types":[]},{"text":"impl Freeze for Lit","synthetic":true,"types":[]},{"text":"impl Freeze for StrStyle","synthetic":true,"types":[]},{"text":"impl Freeze for MacroDelimiter","synthetic":true,"types":[]},{"text":"impl Freeze for Data","synthetic":true,"types":[]},{"text":"impl Freeze for BinOp","synthetic":true,"types":[]},{"text":"impl Freeze for UnOp","synthetic":true,"types":[]},{"text":"impl Freeze for Stmt","synthetic":true,"types":[]},{"text":"impl Freeze for ReturnType","synthetic":true,"types":[]},{"text":"impl Freeze for Type","synthetic":true,"types":[]},{"text":"impl Freeze for Pat","synthetic":true,"types":[]},{"text":"impl Freeze for GenericArgument","synthetic":true,"types":[]},{"text":"impl Freeze for PathArguments","synthetic":true,"types":[]},{"text":"impl Freeze for Underscore","synthetic":true,"types":[]},{"text":"impl Freeze for Abstract","synthetic":true,"types":[]},{"text":"impl Freeze for As","synthetic":true,"types":[]},{"text":"impl Freeze for Async","synthetic":true,"types":[]},{"text":"impl Freeze for Auto","synthetic":true,"types":[]},{"text":"impl Freeze for Await","synthetic":true,"types":[]},{"text":"impl Freeze for Become","synthetic":true,"types":[]},{"text":"impl Freeze for Box","synthetic":true,"types":[]},{"text":"impl Freeze for Break","synthetic":true,"types":[]},{"text":"impl Freeze for Const","synthetic":true,"types":[]},{"text":"impl Freeze for Continue","synthetic":true,"types":[]},{"text":"impl Freeze for Crate","synthetic":true,"types":[]},{"text":"impl Freeze for Default","synthetic":true,"types":[]},{"text":"impl Freeze for Do","synthetic":true,"types":[]},{"text":"impl Freeze for Dyn","synthetic":true,"types":[]},{"text":"impl Freeze for Else","synthetic":true,"types":[]},{"text":"impl Freeze for Enum","synthetic":true,"types":[]},{"text":"impl Freeze for Extern","synthetic":true,"types":[]},{"text":"impl Freeze for Final","synthetic":true,"types":[]},{"text":"impl Freeze for Fn","synthetic":true,"types":[]},{"text":"impl Freeze for For","synthetic":true,"types":[]},{"text":"impl Freeze for If","synthetic":true,"types":[]},{"text":"impl Freeze for Impl","synthetic":true,"types":[]},{"text":"impl Freeze for In","synthetic":true,"types":[]},{"text":"impl Freeze for Let","synthetic":true,"types":[]},{"text":"impl Freeze for Loop","synthetic":true,"types":[]},{"text":"impl Freeze for Macro","synthetic":true,"types":[]},{"text":"impl Freeze for Match","synthetic":true,"types":[]},{"text":"impl Freeze for Mod","synthetic":true,"types":[]},{"text":"impl Freeze for Move","synthetic":true,"types":[]},{"text":"impl Freeze for Mut","synthetic":true,"types":[]},{"text":"impl Freeze for Override","synthetic":true,"types":[]},{"text":"impl Freeze for Priv","synthetic":true,"types":[]},{"text":"impl Freeze for Pub","synthetic":true,"types":[]},{"text":"impl Freeze for Ref","synthetic":true,"types":[]},{"text":"impl Freeze for Return","synthetic":true,"types":[]},{"text":"impl Freeze for SelfType","synthetic":true,"types":[]},{"text":"impl Freeze for SelfValue","synthetic":true,"types":[]},{"text":"impl Freeze for Static","synthetic":true,"types":[]},{"text":"impl Freeze for Struct","synthetic":true,"types":[]},{"text":"impl Freeze for Super","synthetic":true,"types":[]},{"text":"impl Freeze for Trait","synthetic":true,"types":[]},{"text":"impl Freeze for Try","synthetic":true,"types":[]},{"text":"impl Freeze for Type","synthetic":true,"types":[]},{"text":"impl Freeze for Typeof","synthetic":true,"types":[]},{"text":"impl Freeze for Union","synthetic":true,"types":[]},{"text":"impl Freeze for Unsafe","synthetic":true,"types":[]},{"text":"impl Freeze for Unsized","synthetic":true,"types":[]},{"text":"impl Freeze for Use","synthetic":true,"types":[]},{"text":"impl Freeze for Virtual","synthetic":true,"types":[]},{"text":"impl Freeze for Where","synthetic":true,"types":[]},{"text":"impl Freeze for While","synthetic":true,"types":[]},{"text":"impl Freeze for Yield","synthetic":true,"types":[]},{"text":"impl Freeze for Add","synthetic":true,"types":[]},{"text":"impl Freeze for AddEq","synthetic":true,"types":[]},{"text":"impl Freeze for And","synthetic":true,"types":[]},{"text":"impl Freeze for AndAnd","synthetic":true,"types":[]},{"text":"impl Freeze for AndEq","synthetic":true,"types":[]},{"text":"impl Freeze for At","synthetic":true,"types":[]},{"text":"impl Freeze for Bang","synthetic":true,"types":[]},{"text":"impl Freeze for Caret","synthetic":true,"types":[]},{"text":"impl Freeze for CaretEq","synthetic":true,"types":[]},{"text":"impl Freeze for Colon","synthetic":true,"types":[]},{"text":"impl Freeze for Colon2","synthetic":true,"types":[]},{"text":"impl Freeze for Comma","synthetic":true,"types":[]},{"text":"impl Freeze for Div","synthetic":true,"types":[]},{"text":"impl Freeze for DivEq","synthetic":true,"types":[]},{"text":"impl Freeze for Dollar","synthetic":true,"types":[]},{"text":"impl Freeze for Dot","synthetic":true,"types":[]},{"text":"impl Freeze for Dot2","synthetic":true,"types":[]},{"text":"impl Freeze for Dot3","synthetic":true,"types":[]},{"text":"impl Freeze for DotDotEq","synthetic":true,"types":[]},{"text":"impl Freeze for Eq","synthetic":true,"types":[]},{"text":"impl Freeze for EqEq","synthetic":true,"types":[]},{"text":"impl Freeze for Ge","synthetic":true,"types":[]},{"text":"impl Freeze for Gt","synthetic":true,"types":[]},{"text":"impl Freeze for Le","synthetic":true,"types":[]},{"text":"impl Freeze for Lt","synthetic":true,"types":[]},{"text":"impl Freeze for MulEq","synthetic":true,"types":[]},{"text":"impl Freeze for Ne","synthetic":true,"types":[]},{"text":"impl Freeze for Or","synthetic":true,"types":[]},{"text":"impl Freeze for OrEq","synthetic":true,"types":[]},{"text":"impl Freeze for OrOr","synthetic":true,"types":[]},{"text":"impl Freeze for Pound","synthetic":true,"types":[]},{"text":"impl Freeze for Question","synthetic":true,"types":[]},{"text":"impl Freeze for RArrow","synthetic":true,"types":[]},{"text":"impl Freeze for LArrow","synthetic":true,"types":[]},{"text":"impl Freeze for Rem","synthetic":true,"types":[]},{"text":"impl Freeze for RemEq","synthetic":true,"types":[]},{"text":"impl Freeze for FatArrow","synthetic":true,"types":[]},{"text":"impl Freeze for Semi","synthetic":true,"types":[]},{"text":"impl Freeze for Shl","synthetic":true,"types":[]},{"text":"impl Freeze for ShlEq","synthetic":true,"types":[]},{"text":"impl Freeze for Shr","synthetic":true,"types":[]},{"text":"impl Freeze for ShrEq","synthetic":true,"types":[]},{"text":"impl Freeze for Star","synthetic":true,"types":[]},{"text":"impl Freeze for Sub","synthetic":true,"types":[]},{"text":"impl Freeze for SubEq","synthetic":true,"types":[]},{"text":"impl Freeze for Tilde","synthetic":true,"types":[]},{"text":"impl Freeze for Brace","synthetic":true,"types":[]},{"text":"impl Freeze for Bracket","synthetic":true,"types":[]},{"text":"impl Freeze for Paren","synthetic":true,"types":[]},{"text":"impl Freeze for Group","synthetic":true,"types":[]},{"text":"impl Freeze for TokenBuffer","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for Cursor&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T, P&gt; Freeze for Punctuated&lt;T, P&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T, P&gt; Freeze for Pairs&lt;'a, T, P&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T, P&gt; Freeze for PairsMut&lt;'a, T, P&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T, P&gt; Freeze for IntoPairs&lt;T, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for IntoIter&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Freeze for Iter&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Freeze for IterMut&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T, P&gt; Freeze for Pair&lt;T, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !Freeze for Lookahead1&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !Freeze for ParseBuffer&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'c, 'a&gt; Freeze for StepCursor&lt;'c, 'a&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for Nothing","synthetic":true,"types":[]}];
implementors["synstructure"] = [{"text":"impl&lt;'a&gt; Freeze for BindingInfo&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for VariantAst&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for VariantInfo&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for Structure&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for AddBounds","synthetic":true,"types":[]},{"text":"impl Freeze for BindStyle","synthetic":true,"types":[]}];
implementors["test_runtime_simple_keyvalue"] = [{"text":"impl Freeze for Runtime","synthetic":true,"types":[]},{"text":"impl Freeze for Parameters","synthetic":true,"types":[]},{"text":"impl Freeze for Genesis","synthetic":true,"types":[]},{"text":"impl Freeze for Module","synthetic":true,"types":[]},{"text":"impl Freeze for Error","synthetic":true,"types":[]},{"text":"impl Freeze for Event","synthetic":true,"types":[]},{"text":"impl Freeze for Key","synthetic":true,"types":[]},{"text":"impl Freeze for KeyValue","synthetic":true,"types":[]}];
implementors["time"] = [{"text":"impl Freeze for Duration","synthetic":true,"types":[]},{"text":"impl Freeze for OutOfRangeError","synthetic":true,"types":[]},{"text":"impl Freeze for Timespec","synthetic":true,"types":[]},{"text":"impl Freeze for PreciseTime","synthetic":true,"types":[]},{"text":"impl Freeze for SteadyTime","synthetic":true,"types":[]},{"text":"impl Freeze for Tm","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for TmFmt&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for ParseError","synthetic":true,"types":[]}];
implementors["tiny_keccak"] = [{"text":"impl Freeze for Sha3","synthetic":true,"types":[]}];
implementors["tokio_current_thread"] = [{"text":"impl&lt;P&nbsp;=&nbsp;ParkThread&gt; !Freeze for CurrentThread&lt;P&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for TaskExecutor","synthetic":true,"types":[]},{"text":"impl Freeze for Turn","synthetic":true,"types":[]},{"text":"impl&lt;'a, P&gt; Freeze for Entered&lt;'a, P&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for RunError","synthetic":true,"types":[]},{"text":"impl Freeze for RunTimeoutError","synthetic":true,"types":[]},{"text":"impl Freeze for TurnError","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for BlockError&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl !Freeze for Handle","synthetic":true,"types":[]}];
implementors["tokio_executor"] = [{"text":"impl Freeze for Enter","synthetic":true,"types":[]},{"text":"impl Freeze for EnterError","synthetic":true,"types":[]},{"text":"impl Freeze for SpawnError","synthetic":true,"types":[]},{"text":"impl Freeze for DefaultExecutor","synthetic":true,"types":[]},{"text":"impl Freeze for DefaultGuard","synthetic":true,"types":[]},{"text":"impl Freeze for ParkThread","synthetic":true,"types":[]},{"text":"impl Freeze for ParkError","synthetic":true,"types":[]},{"text":"impl Freeze for UnparkThread","synthetic":true,"types":[]}];
implementors["typenum"] = [{"text":"impl Freeze for Greater","synthetic":true,"types":[]},{"text":"impl Freeze for Less","synthetic":true,"types":[]},{"text":"impl Freeze for Equal","synthetic":true,"types":[]},{"text":"impl Freeze for B0","synthetic":true,"types":[]},{"text":"impl Freeze for B1","synthetic":true,"types":[]},{"text":"impl&lt;U&gt; Freeze for PInt&lt;U&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;U: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;U&gt; Freeze for NInt&lt;U&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;U: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for Z0","synthetic":true,"types":[]},{"text":"impl Freeze for UTerm","synthetic":true,"types":[]},{"text":"impl&lt;U, B&gt; Freeze for UInt&lt;U, B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;B: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;U: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for ATerm","synthetic":true,"types":[]},{"text":"impl&lt;V, A&gt; Freeze for TArr&lt;V, A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: Freeze,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["universal_hash"] = [{"text":"impl&lt;U&gt; Freeze for Output&lt;U&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt;U as UniversalHash&gt;::BlockSize as ArrayLength&lt;u8&gt;&gt;::ArrayType: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for Error","synthetic":true,"types":[]}];
implementors["untrusted"] = [{"text":"impl&lt;'a&gt; Freeze for Input&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for Reader&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for Mark","synthetic":true,"types":[]},{"text":"impl Freeze for EndOfInput","synthetic":true,"types":[]}];
implementors["webpki"] = [{"text":"impl&lt;'a&gt; Freeze for DNSNameRef&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for InvalidDNSNameError","synthetic":true,"types":[]},{"text":"impl Freeze for DNSName","synthetic":true,"types":[]},{"text":"impl Freeze for SignatureAlgorithm","synthetic":true,"types":[]},{"text":"impl Freeze for Time","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for EndEntityCert&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for TrustAnchor&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for TLSServerTrustAnchors&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for TLSClientTrustAnchors&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for Error","synthetic":true,"types":[]}];
implementors["wyz"] = [{"text":"impl&lt;T&gt; Freeze for FmtBinary&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for FmtDisplay&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for FmtLowerExp&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for FmtLowerHex&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for FmtOctal&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for FmtPointer&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for FmtUpperExp&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for FmtUpperHex&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["x25519_dalek"] = [{"text":"impl Freeze for PublicKey","synthetic":true,"types":[]},{"text":"impl Freeze for EphemeralSecret","synthetic":true,"types":[]},{"text":"impl Freeze for StaticSecret","synthetic":true,"types":[]},{"text":"impl Freeze for SharedSecret","synthetic":true,"types":[]}];
implementors["zeroize"] = [{"text":"impl&lt;Z&gt; Freeze for Zeroizing&lt;Z&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Z: Freeze,&nbsp;</span>","synthetic":true,"types":[]}];
if (window.register_implementors) {window.register_implementors(implementors);} else {window.pending_implementors = implementors;}})()